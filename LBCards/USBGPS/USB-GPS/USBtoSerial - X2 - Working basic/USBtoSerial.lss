
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002c  00800100  00001186  0000121a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001186  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  0080012c  0080012c  00001246  2**0
                  ALLOC
  3 .debug_aranges 000004b0  00000000  00000000  00001246  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ce2  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00008600  00000000  00000000  000023d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000215d  00000000  00000000  0000a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006fd2  00000000  00000000  0000cb35  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000720  00000000  00000000  00013b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003a1a  00000000  00000000  00014228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003641  00000000  00000000  00017c42  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005a0  00000000  00000000  0001b283  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       2:	00 00       	nop
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	cf c4       	rjmp	.+2462   	; 0x9c8 <__vector_10>
      2a:	00 00       	nop
      2c:	92 c4       	rjmp	.+2340   	; 0x952 <__vector_11>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	df c0       	rjmp	.+446    	; 0x224 <__vector_25>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 fa 09 04 00 00 01 02 02     ..>.............
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     110:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011a <ProductString>:
     11a:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     12a:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     13a:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	e6 e8       	ldi	r30, 0x86	; 134
     15e:	f1 e1       	ldi	r31, 0x11	; 17
     160:	02 c0       	rjmp	.+4      	; 0x166 <.do_copy_data_start>

00000162 <.do_copy_data_loop>:
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0

00000166 <.do_copy_data_start>:
     166:	ac 32       	cpi	r26, 0x2C	; 44
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <.do_copy_data_loop>

0000016c <__do_clear_bss>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	ac e2       	ldi	r26, 0x2C	; 44
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a0 35       	cpi	r26, 0x50	; 80
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	44 d1       	rcall	.+648    	; 0x406 <main>
     17e:	0c 94 c1 08 	jmp	0x1182	; 0x1182 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <LEDs_SetAllLEDs>:
#include <inttypes.h>
#include "USBtoSerial.h"

void LEDs_SetAllLEDs(int LEDVal)
{
	if (LEDVal & 0x1)
     184:	80 ff       	sbrs	r24, 0
     186:	02 c0       	rjmp	.+4      	; 0x18c <LEDs_SetAllLEDs+0x8>
		PORTB |= 0x80;
     188:	2f 9a       	sbi	0x05, 7	; 5
     18a:	01 c0       	rjmp	.+2      	; 0x18e <LEDs_SetAllLEDs+0xa>
	else
		PORTB &= 0x7f;
     18c:	2f 98       	cbi	0x05, 7	; 5
	if (LEDVal & 0x2)
     18e:	81 ff       	sbrs	r24, 1
     190:	02 c0       	rjmp	.+4      	; 0x196 <LEDs_SetAllLEDs+0x12>
		PORTD |= 0x01;
     192:	58 9a       	sbi	0x0b, 0	; 11
     194:	08 95       	ret
	else
		PORTD &= 0xfe;
     196:	58 98       	cbi	0x0b, 0	; 11
     198:	08 95       	ret

0000019a <LEDs_Init>:
}

void LEDs_Init(void)
{
	DDRB = 0x80;
     19a:	80 e8       	ldi	r24, 0x80	; 128
     19c:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0x7f;
     19e:	2f 98       	cbi	0x05, 7	; 5
  DDRD = 0x01;
     1a0:	81 e0       	ldi	r24, 0x01	; 1
     1a2:	8a b9       	out	0x0a, r24	; 10
  PORTD &= 0xfe;
     1a4:	58 98       	cbi	0x0b, 0	; 11
}
     1a6:	08 95       	ret

000001a8 <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into.
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1ac:	ec 01       	movw	r28, r24

			*Buffer->In = Data;
     1ae:	e8 81       	ld	r30, Y
     1b0:	f9 81       	ldd	r31, Y+1	; 0x01
     1b2:	60 83       	st	Z, r22

			if (++Buffer->In == Buffer->End)
     1b4:	88 81       	ld	r24, Y
     1b6:	99 81       	ldd	r25, Y+1	; 0x01
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	99 83       	std	Y+1, r25	; 0x01
     1bc:	88 83       	st	Y, r24
     1be:	2e 81       	ldd	r18, Y+6	; 0x06
     1c0:	3f 81       	ldd	r19, Y+7	; 0x07
     1c2:	82 17       	cp	r24, r18
     1c4:	93 07       	cpc	r25, r19
     1c6:	21 f4       	brne	.+8      	; 0x1d0 <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Start;
     1c8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ca:	9d 81       	ldd	r25, Y+5	; 0x05
     1cc:	99 83       	std	Y+1, r25	; 0x01
     1ce:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1d0:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d2:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     1d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     1d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     1d8:	01 96       	adiw	r24, 0x01	; 1
     1da:	9b 87       	std	Y+11, r25	; 0x0b
     1dc:	8a 87       	std	Y+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1de:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <RingBuffer_Remove>:
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1ea:	ec 01       	movw	r28, r24

			uint8_t Data = *Buffer->Out;
     1ec:	ea 81       	ldd	r30, Y+2	; 0x02
     1ee:	fb 81       	ldd	r31, Y+3	; 0x03
     1f0:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
     1f2:	fb 83       	std	Y+3, r31	; 0x03
     1f4:	ea 83       	std	Y+2, r30	; 0x02
     1f6:	8e 81       	ldd	r24, Y+6	; 0x06
     1f8:	9f 81       	ldd	r25, Y+7	; 0x07
     1fa:	e8 17       	cp	r30, r24
     1fc:	f9 07       	cpc	r31, r25
     1fe:	21 f4       	brne	.+8      	; 0x208 <RingBuffer_Remove+0x22>
			  Buffer->Out = Buffer->Start;
     200:	8c 81       	ldd	r24, Y+4	; 0x04
     202:	9d 81       	ldd	r25, Y+5	; 0x05
     204:	9b 83       	std	Y+3, r25	; 0x03
     206:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     208:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     20a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     20c:	8a 85       	ldd	r24, Y+10	; 0x0a
     20e:	9b 85       	ldd	r25, Y+11	; 0x0b
     210:	01 97       	sbiw	r24, 0x01	; 1
     212:	9b 87       	std	Y+11, r25	; 0x0b
     214:	8a 87       	std	Y+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     216:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     218:	83 2f       	mov	r24, r19
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
//	LEDs_SetAllLEDs(1);
}
     220:	08 95       	ret

00000222 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
//	LEDs_SetAllLEDs(2);
}
     222:	08 95       	ret

00000224 <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	2f 93       	push	r18
     230:	3f 93       	push	r19
     232:	4f 93       	push	r20
     234:	5f 93       	push	r21
     236:	6f 93       	push	r22
     238:	7f 93       	push	r23
     23a:	8f 93       	push	r24
     23c:	9f 93       	push	r25
     23e:	af 93       	push	r26
     240:	bf 93       	push	r27
     242:	ef 93       	push	r30
     244:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     246:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     24a:	8e b3       	in	r24, 0x1e	; 30
     24c:	84 30       	cpi	r24, 0x04	; 4
     24e:	19 f4       	brne	.+6      	; 0x256 <__vector_25+0x32>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     250:	88 eb       	ldi	r24, 0xB8	; 184
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	a9 df       	rcall	.-174    	; 0x1a8 <RingBuffer_Insert>
}
     256:	ff 91       	pop	r31
     258:	ef 91       	pop	r30
     25a:	bf 91       	pop	r27
     25c:	af 91       	pop	r26
     25e:	9f 91       	pop	r25
     260:	8f 91       	pop	r24
     262:	7f 91       	pop	r23
     264:	6f 91       	pop	r22
     266:	5f 91       	pop	r21
     268:	4f 91       	pop	r20
     26a:	3f 91       	pop	r19
     26c:	2f 91       	pop	r18
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     278:	1f 93       	push	r17
     27a:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     27c:	81 8d       	ldd	r24, Z+25	; 0x19
     27e:	81 30       	cpi	r24, 0x01	; 1
     280:	19 f0       	breq	.+6      	; 0x288 <EVENT_CDC_Device_LineEncodingChanged+0x10>
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	19 f4       	brne	.+6      	; 0x28c <EVENT_CDC_Device_LineEncodingChanged+0x14>
     286:	04 c0       	rjmp	.+8      	; 0x290 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     288:	10 e3       	ldi	r17, 0x30	; 48
     28a:	03 c0       	rjmp	.+6      	; 0x292 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     28c:	10 e0       	ldi	r17, 0x00	; 0
     28e:	01 c0       	rjmp	.+2      	; 0x292 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     290:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     292:	80 8d       	ldd	r24, Z+24	; 0x18
     294:	82 30       	cpi	r24, 0x02	; 2
     296:	09 f4       	brne	.+2      	; 0x29a <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
     298:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     29a:	82 8d       	ldd	r24, Z+26	; 0x1a
     29c:	87 30       	cpi	r24, 0x07	; 7
     29e:	31 f0       	breq	.+12     	; 0x2ac <EVENT_CDC_Device_LineEncodingChanged+0x34>
     2a0:	88 30       	cpi	r24, 0x08	; 8
     2a2:	31 f0       	breq	.+12     	; 0x2b0 <EVENT_CDC_Device_LineEncodingChanged+0x38>
     2a4:	86 30       	cpi	r24, 0x06	; 6
     2a6:	29 f4       	brne	.+10     	; 0x2b2 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     2a8:	12 60       	ori	r17, 0x02	; 2
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
     2ac:	14 60       	ori	r17, 0x04	; 4
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     2b0:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     2b2:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     2b6:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     2ba:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     2be:	24 89       	ldd	r18, Z+20	; 0x14
     2c0:	35 89       	ldd	r19, Z+21	; 0x15
     2c2:	46 89       	ldd	r20, Z+22	; 0x16
     2c4:	57 89       	ldd	r21, Z+23	; 0x17
     2c6:	ca 01       	movw	r24, r20
     2c8:	b9 01       	movw	r22, r18
     2ca:	96 95       	lsr	r25
     2cc:	87 95       	ror	r24
     2ce:	77 95       	ror	r23
     2d0:	67 95       	ror	r22
     2d2:	60 5c       	subi	r22, 0xC0	; 192
     2d4:	7d 4b       	sbci	r23, 0xBD	; 189
     2d6:	80 4f       	sbci	r24, 0xF0	; 240
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	31 d7       	rcall	.+3682   	; 0x113e <__udivmodsi4>
     2dc:	21 50       	subi	r18, 0x01	; 1
     2de:	30 40       	sbci	r19, 0x00	; 0
     2e0:	30 93 cd 00 	sts	0x00CD, r19
     2e4:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     2e8:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     2f2:	88 e9       	ldi	r24, 0x98	; 152
     2f4:	80 93 c9 00 	sts	0x00C9, r24
}
     2f8:	1f 91       	pop	r17
     2fa:	08 95       	ret

000002fc <setBaudRate9600>:

void setBaudRate9600(void)
{
	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     2fc:	29 ec       	ldi	r18, 0xC9	; 201
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	f9 01       	movw	r30, r18
     302:	10 82       	st	Z, r1
	UCSR1A = 0;
     304:	a8 ec       	ldi	r26, 0xC8	; 200
     306:	b0 e0       	ldi	r27, 0x00	; 0
     308:	1c 92       	st	X, r1
	UCSR1C = 0;
     30a:	ea ec       	ldi	r30, 0xCA	; 202
     30c:	f0 e0       	ldi	r31, 0x00	; 0
     30e:	10 82       	st	Z, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = 103;
     310:	87 e6       	ldi	r24, 0x67	; 103
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	90 93 cd 00 	sts	0x00CD, r25
     318:	80 93 cc 00 	sts	0x00CC, r24
	// UCSR1C[7:6] = 00 - Async USART
	// UCSR1C[5:4] = 00 - No Parity
	// UCSR1C[3]   = 0  - 1 Stop Bit
	// UCSR1C[2:1] = 11 - 8 Data Bits
	// UCSR1C[0]   = 0  - Clock Polarity (8 for Async)
	UCSR1C = 0x6;
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	80 83       	st	Z, r24
	UCSR1A = (1 << U2X1);
     320:	82 e0       	ldi	r24, 0x02	; 2
     322:	8c 93       	st	X, r24
	UCSR1B = 0x08;
     324:	88 e0       	ldi	r24, 0x08	; 8
     326:	f9 01       	movw	r30, r18
     328:	80 83       	st	Z, r24
}
     32a:	08 95       	ret

0000032c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     32c:	80 e1       	ldi	r24, 0x10	; 16
     32e:	91 e0       	ldi	r25, 0x01	; 1
}
     330:	5a c6       	rjmp	.+3252   	; 0xfe6 <CDC_Device_ProcessControlRequest>

00000332 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     332:	80 e1       	ldi	r24, 0x10	; 16
     334:	91 e0       	ldi	r25, 0x01	; 1

//	LEDs_SetAllLEDs(ConfigSuccess ? 2 : 3);
}
     336:	30 c6       	rjmp	.+3168   	; 0xf98 <CDC_Device_ConfigureEndpoints>

00000338 <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	cd b7       	in	r28, 0x3d	; 61
     33e:	de b7       	in	r29, 0x3e	; 62
     340:	60 97       	sbiw	r28, 0x10	; 16
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	f8 94       	cli
     346:	de bf       	out	0x3e, r29	; 62
     348:	0f be       	out	0x3f, r0	; 63
     34a:	cd bf       	out	0x3d, r28	; 61
	char kickLoggerString[] = "$PMTK185,0*22\r\n";
     34c:	de 01       	movw	r26, r28
     34e:	11 96       	adiw	r26, 0x01	; 1
     350:	e0 e0       	ldi	r30, 0x00	; 0
     352:	f1 e0       	ldi	r31, 0x01	; 1
     354:	80 e1       	ldi	r24, 0x10	; 16
     356:	01 90       	ld	r0, Z+
     358:	0d 92       	st	X+, r0
     35a:	81 50       	subi	r24, 0x01	; 1
     35c:	e1 f7       	brne	.-8      	; 0x356 <SetupHardware+0x1e>
	int16_t outBuffPtr = 0;
	
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     35e:	84 b7       	in	r24, 0x34	; 52
     360:	87 7f       	andi	r24, 0xF7	; 247
     362:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     364:	88 e1       	ldi	r24, 0x18	; 24
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	80 93 60 00 	sts	0x0060, r24
     36e:	10 92 60 00 	sts	0x0060, r1
     372:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	20 e8       	ldi	r18, 0x80	; 128
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	20 93 61 00 	sts	0x0061, r18
     382:	80 93 61 00 	sts	0x0061, r24
     386:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
	LEDs_Init();
     388:	08 df       	rcall	.-496    	; 0x19a <LEDs_Init>

	DDRF &= 0xf7;   // PF0 is 3DFIX input
     38a:	83 98       	cbi	0x10, 3	; 16
	DDRF &= 0xdf;   // PF5 is 1PPS input
     38c:	85 98       	cbi	0x10, 5	; 16
  DDRD &= 0xdf;   // PD5 is BRCR input
     38e:	55 98       	cbi	0x0a, 5	; 10
  
	LEDs_SetAllLEDs(1);
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	f7 de       	rcall	.-530    	; 0x184 <LEDs_SetAllLEDs>
     396:	88 e8       	ldi	r24, 0x88	; 136
     398:	93 e1       	ldi	r25, 0x13	; 19
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     39a:	28 ec       	ldi	r18, 0xC8	; 200
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	31 97       	sbiw	r30, 0x01	; 1
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <SetupHardware+0x68>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3a6:	d9 f7       	brne	.-10     	; 0x39e <SetupHardware+0x66>

	_delay_ms(500);

	// Hard set the baud rate to 9600 since that's the rate that the USART runs at
	setBaudRate9600();
     3a8:	a9 df       	rcall	.-174    	; 0x2fc <setBaudRate9600>
     3aa:	88 ee       	ldi	r24, 0xE8	; 232
     3ac:	93 e0       	ldi	r25, 0x03	; 3
     3ae:	28 ec       	ldi	r18, 0xC8	; 200
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	f9 01       	movw	r30, r18
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <SetupHardware+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ba:	d9 f7       	brne	.-10     	; 0x3b2 <SetupHardware+0x7a>
     3bc:	fe 01       	movw	r30, r28
     3be:	06 c0       	rjmp	.+12     	; 0x3cc <SetupHardware+0x94>
	// PMTK_LOCUS_STARTLOG
	// $PMTK185,0*22 is the command
	
	while (kickLoggerString[outBuffPtr] != 0)
	{
		while (!( UCSR1A & (1<<UDRE1)) );		// hang around until transmitter is empty
     3c0:	80 91 c8 00 	lds	r24, 0x00C8
     3c4:	85 ff       	sbrs	r24, 5
     3c6:	fc cf       	rjmp	.-8      	; 0x3c0 <SetupHardware+0x88>
		UDR1 = kickLoggerString[outBuffPtr];
     3c8:	90 93 ce 00 	sts	0x00CE, r25
     3cc:	31 96       	adiw	r30, 0x01	; 1

	// Kick the GPS LOCUS to start logging data
	// PMTK_LOCUS_STARTLOG
	// $PMTK185,0*22 is the command
	
	while (kickLoggerString[outBuffPtr] != 0)
     3ce:	90 81       	ld	r25, Z
     3d0:	99 23       	and	r25, r25
     3d2:	b1 f7       	brne	.-20     	; 0x3c0 <SetupHardware+0x88>
	{
		while (!( UCSR1A & (1<<UDRE1)) );		// hang around until transmitter is empty
		UDR1 = kickLoggerString[outBuffPtr];
		outBuffPtr++;
	}
	while ((UCSR1A & TXC1) == 0);		// hang around until the entire packet is transmitted out
     3d4:	80 91 c8 00 	lds	r24, 0x00C8
     3d8:	86 70       	andi	r24, 0x06	; 6
     3da:	e1 f3       	breq	.-8      	; 0x3d4 <SetupHardware+0x9c>
     3dc:	88 e8       	ldi	r24, 0x88	; 136
     3de:	93 e1       	ldi	r25, 0x13	; 19
     3e0:	28 ec       	ldi	r18, 0xC8	; 200
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	f9 01       	movw	r30, r18
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <SetupHardware+0xae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3ec:	d9 f7       	brne	.-10     	; 0x3e4 <SetupHardware+0xac>

	_delay_ms(500);

	USB_Init();
     3ee:	94 d2       	rcall	.+1320   	; 0x918 <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     3f0:	84 e0       	ldi	r24, 0x04	; 4
     3f2:	85 bd       	out	0x25, r24	; 37
}
     3f4:	60 96       	adiw	r28, 0x10	; 16
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	cf 91       	pop	r28
     402:	df 91       	pop	r29
     404:	08 95       	ret

00000406 <main>:
 *   Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */

int main(void)
{
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
	SetupHardware();
     40a:	96 df       	rcall	.-212    	; 0x338 <SetupHardware>
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     40c:	ec e2       	ldi	r30, 0x2C	; 44
     40e:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     410:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     412:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     414:	88 e3       	ldi	r24, 0x38	; 56
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	91 83       	std	Z+1, r25	; 0x01
     41a:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     41c:	93 83       	std	Z+3, r25	; 0x03
     41e:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     420:	95 83       	std	Z+5, r25	; 0x05
     422:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     424:	88 eb       	ldi	r24, 0xB8	; 184
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	97 83       	std	Z+7, r25	; 0x07
     42a:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     42c:	80 e8       	ldi	r24, 0x80	; 128
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	91 87       	std	Z+9, r25	; 0x09
     432:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     434:	13 86       	std	Z+11, r1	; 0x0b
     436:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     438:	2f bf       	out	0x3f, r18	; 63
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     43a:	e8 eb       	ldi	r30, 0xB8	; 184
     43c:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     43e:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     440:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     442:	84 ec       	ldi	r24, 0xC4	; 196
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	91 83       	std	Z+1, r25	; 0x01
     448:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     44a:	93 83       	std	Z+3, r25	; 0x03
     44c:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     44e:	95 83       	std	Z+5, r25	; 0x05
     450:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     452:	84 e4       	ldi	r24, 0x44	; 68
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	97 83       	std	Z+7, r25	; 0x07
     458:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     45a:	80 e8       	ldi	r24, 0x80	; 128
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	91 87       	std	Z+9, r25	; 0x09
     460:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     462:	13 86       	std	Z+11, r1	; 0x0b
     464:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     466:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(0);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	8b de       	rcall	.-746    	; 0x184 <LEDs_SetAllLEDs>

	sei();
     46e:	78 94       	sei

	for (;;)
	{
		if ((PINF & 0x01) == 0x01)
     470:	78 9b       	sbis	0x0f, 0	; 15
     472:	03 c0       	rjmp	.+6      	; 0x47a <main+0x74>
			LEDs_SetAllLEDs(2);
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <main+0x78>
		else
			LEDs_SetAllLEDs(0);
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	82 de       	rcall	.-764    	; 0x184 <LEDs_SetAllLEDs>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     480:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     482:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     484:	20 91 36 01 	lds	r18, 0x0136
     488:	30 91 37 01 	lds	r19, 0x0137
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     48c:	8f bf       	out	0x3f, r24	; 63
		/* Only try to read in bytes from the CDC interface if the (outbound) transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     48e:	80 91 34 01 	lds	r24, 0x0134
     492:	90 91 35 01 	lds	r25, 0x0135
     496:	28 17       	cp	r18, r24
     498:	39 07       	cpc	r19, r25
     49a:	49 f0       	breq	.+18     	; 0x4ae <main+0xa8>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     49c:	80 e1       	ldi	r24, 0x10	; 16
     49e:	91 e0       	ldi	r25, 0x01	; 1
     4a0:	d0 d4       	rcall	.+2464   	; 0xe42 <CDC_Device_ReceiveByte>
     4a2:	bc 01       	movw	r22, r24

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     4a4:	97 fd       	sbrc	r25, 7
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <main+0xa8>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     4a8:	8c e2       	ldi	r24, 0x2C	; 44
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	7d de       	rcall	.-774    	; 0x1a8 <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     4ae:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     4b0:	f8 94       	cli
     4b2:	c0 91 c2 01 	lds	r28, 0x01C2
     4b6:	d0 91 c3 01 	lds	r29, 0x01C3
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     4ba:	8f bf       	out	0x3f, r24	; 63
		}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t)(sizeof(USARTtoUSB_Buffer_Data) * .75)))
     4bc:	a8 99       	sbic	0x15, 0	; 21
     4be:	03 c0       	rjmp	.+6      	; 0x4c6 <main+0xc0>
     4c0:	c1 36       	cpi	r28, 0x61	; 97
     4c2:	d1 05       	cpc	r29, r1
     4c4:	90 f0       	brcs	.+36     	; 0x4ea <main+0xe4>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     4c6:	a8 9a       	sbi	0x15, 0	; 21
     4c8:	0e c0       	rjmp	.+28     	; 0x4e6 <main+0xe0>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			{
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     4ca:	e0 91 ba 01 	lds	r30, 0x01BA
     4ce:	f0 91 bb 01 	lds	r31, 0x01BB
     4d2:	80 e1       	ldi	r24, 0x10	; 16
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	60 81       	ld	r22, Z
     4d8:	3a d5       	rcall	.+2676   	; 0xf4e <CDC_Device_SendByte>
     4da:	21 97       	sbiw	r28, 0x01	; 1
     4dc:	88 23       	and	r24, r24
     4de:	29 f4       	brne	.+10     	; 0x4ea <main+0xe4>
				{
					break;
				}

				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
				RingBuffer_Remove(&USARTtoUSB_Buffer);
     4e0:	88 eb       	ldi	r24, 0xB8	; 184
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	80 de       	rcall	.-768    	; 0x1e6 <RingBuffer_Remove>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
     4e6:	20 97       	sbiw	r28, 0x00	; 0
     4e8:	81 f7       	brne	.-32     	; 0x4ca <main+0xc4>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     4ea:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     4ec:	f8 94       	cli
     4ee:	80 91 36 01 	lds	r24, 0x0136
     4f2:	90 91 37 01 	lds	r25, 0x0137
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     4f6:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Remove(&USARTtoUSB_Buffer);
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
     4f8:	89 2b       	or	r24, r25
     4fa:	51 f0       	breq	.+20     	; 0x510 <main+0x10a>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     4fc:	8c e2       	ldi	r24, 0x2C	; 44
     4fe:	91 e0       	ldi	r25, 0x01	; 1
     500:	72 de       	rcall	.-796    	; 0x1e6 <RingBuffer_Remove>
     502:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     504:	80 91 c8 00 	lds	r24, 0x00C8
     508:	85 ff       	sbrs	r24, 5
     50a:	fc cf       	rjmp	.-8      	; 0x504 <main+0xfe>
				UDR1 = DataByte;
     50c:	90 93 ce 00 	sts	0x00CE, r25

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     510:	80 e1       	ldi	r24, 0x10	; 16
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	05 d5       	rcall	.+2570   	; 0xf20 <CDC_Device_USBTask>
		USB_USBTask();
     516:	81 d4       	rcall	.+2306   	; 0xe1a <USB_USBTask>
     518:	ab cf       	rjmp	.-170    	; 0x470 <main+0x6a>

0000051a <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     51a:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     51c:	92 30       	cpi	r25, 0x02	; 2
     51e:	49 f0       	breq	.+18     	; 0x532 <CALLBACK_USB_GetDescriptor+0x18>
     520:	93 30       	cpi	r25, 0x03	; 3
     522:	61 f0       	breq	.+24     	; 0x53c <CALLBACK_USB_GetDescriptor+0x22>
     524:	91 30       	cpi	r25, 0x01	; 1
     526:	f9 f4       	brne	.+62     	; 0x566 <CALLBACK_USB_GetDescriptor+0x4c>
     528:	ec ea       	ldi	r30, 0xAC	; 172
     52a:	f0 e0       	ldi	r31, 0x00	; 0
     52c:	22 e1       	ldi	r18, 0x12	; 18
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	1e c0       	rjmp	.+60     	; 0x56e <CALLBACK_USB_GetDescriptor+0x54>
     532:	ee eb       	ldi	r30, 0xBE	; 190
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	2e e3       	ldi	r18, 0x3E	; 62
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	19 c0       	rjmp	.+50     	; 0x56e <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	49 f0       	breq	.+18     	; 0x552 <CALLBACK_USB_GetDescriptor+0x38>
     540:	81 30       	cpi	r24, 0x01	; 1
     542:	18 f0       	brcs	.+6      	; 0x54a <CALLBACK_USB_GetDescriptor+0x30>
     544:	82 30       	cpi	r24, 0x02	; 2
     546:	79 f4       	brne	.+30     	; 0x566 <CALLBACK_USB_GetDescriptor+0x4c>
     548:	08 c0       	rjmp	.+16     	; 0x55a <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     54a:	ec ef       	ldi	r30, 0xFC	; 252
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	84 91       	lpm	r24, Z+
     550:	07 c0       	rjmp	.+14     	; 0x560 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     552:	e0 e0       	ldi	r30, 0x00	; 0
     554:	f1 e0       	ldi	r31, 0x01	; 1
     556:	84 91       	lpm	r24, Z+
     558:	03 c0       	rjmp	.+6      	; 0x560 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     55a:	ea e1       	ldi	r30, 0x1A	; 26
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	84 91       	lpm	r24, Z+
     560:	28 2f       	mov	r18, r24
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	04 c0       	rjmp	.+8      	; 0x56e <CALLBACK_USB_GetDescriptor+0x54>
     566:	e0 e0       	ldi	r30, 0x00	; 0
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     56e:	ed 93       	st	X+, r30
     570:	fc 93       	st	X, r31
	return Size;
}
     572:	c9 01       	movw	r24, r18
     574:	08 95       	ret

00000576 <Endpoint_Write_Control_Stream_LE>:
     576:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     578:	40 91 4e 02 	lds	r20, 0x024E
     57c:	50 91 4f 02 	lds	r21, 0x024F
     580:	46 17       	cp	r20, r22
     582:	57 07       	cpc	r21, r23
     584:	18 f4       	brcc	.+6      	; 0x58c <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     586:	f9 01       	movw	r30, r18
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	44 c0       	rjmp	.+136    	; 0x614 <Endpoint_Write_Control_Stream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     58c:	61 15       	cp	r22, r1
     58e:	71 05       	cpc	r23, r1
     590:	11 f0       	breq	.+4      	; 0x596 <Endpoint_Write_Control_Stream_LE+0x20>
     592:	ab 01       	movw	r20, r22
     594:	f8 cf       	rjmp	.-16     	; 0x586 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     596:	80 91 e8 00 	lds	r24, 0x00E8
     59a:	8e 77       	andi	r24, 0x7E	; 126
     59c:	80 93 e8 00 	sts	0x00E8, r24
     5a0:	40 e0       	ldi	r20, 0x00	; 0
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	f0 cf       	rjmp	.-32     	; 0x586 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     5a6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     5a8:	88 23       	and	r24, r24
     5aa:	09 f4       	brne	.+2      	; 0x5ae <Endpoint_Write_Control_Stream_LE+0x38>
     5ac:	44 c0       	rjmp	.+136    	; 0x636 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     5ae:	85 30       	cpi	r24, 0x05	; 5
     5b0:	09 f4       	brne	.+2      	; 0x5b4 <Endpoint_Write_Control_Stream_LE+0x3e>
     5b2:	43 c0       	rjmp	.+134    	; 0x63a <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     5b4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     5b8:	83 ff       	sbrs	r24, 3
     5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <Endpoint_Write_Control_Stream_LE+0x4a>
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     5c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     5c4:	82 fd       	sbrc	r24, 2
     5c6:	31 c0       	rjmp	.+98     	; 0x62a <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     5c8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     5cc:	80 ff       	sbrs	r24, 0
     5ce:	22 c0       	rjmp	.+68     	; 0x614 <Endpoint_Write_Control_Stream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     5d0:	80 91 f3 00 	lds	r24, 0x00F3
     5d4:	90 91 f2 00 	lds	r25, 0x00F2
     5d8:	78 2f       	mov	r23, r24
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	29 2f       	mov	r18, r25
     5de:	30 e0       	ldi	r19, 0x00	; 0
     5e0:	26 2b       	or	r18, r22
     5e2:	37 2b       	or	r19, r23
     5e4:	07 c0       	rjmp	.+14     	; 0x5f4 <Endpoint_Write_Control_Stream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     5e6:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     5e8:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     5ec:	41 50       	subi	r20, 0x01	; 1
     5ee:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     5f0:	2f 5f       	subi	r18, 0xFF	; 255
     5f2:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     5f4:	41 15       	cp	r20, r1
     5f6:	51 05       	cpc	r21, r1
     5f8:	19 f0       	breq	.+6      	; 0x600 <Endpoint_Write_Control_Stream_LE+0x8a>
     5fa:	28 30       	cpi	r18, 0x08	; 8
     5fc:	31 05       	cpc	r19, r1
     5fe:	98 f3       	brcs	.-26     	; 0x5e6 <Endpoint_Write_Control_Stream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	28 30       	cpi	r18, 0x08	; 8
     604:	31 05       	cpc	r19, r1
     606:	09 f4       	brne	.+2      	; 0x60a <Endpoint_Write_Control_Stream_LE+0x94>
     608:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     60a:	80 91 e8 00 	lds	r24, 0x00E8
     60e:	8e 77       	andi	r24, 0x7E	; 126
     610:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     614:	41 15       	cp	r20, r1
     616:	51 05       	cpc	r21, r1
     618:	31 f6       	brne	.-116    	; 0x5a6 <Endpoint_Write_Control_Stream_LE+0x30>
     61a:	99 23       	and	r25, r25
     61c:	21 f6       	brne	.-120    	; 0x5a6 <Endpoint_Write_Control_Stream_LE+0x30>
     61e:	05 c0       	rjmp	.+10     	; 0x62a <Endpoint_Write_Control_Stream_LE+0xb4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     620:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     622:	88 23       	and	r24, r24
     624:	41 f0       	breq	.+16     	; 0x636 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     626:	85 30       	cpi	r24, 0x05	; 5
     628:	41 f0       	breq	.+16     	; 0x63a <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     62a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     62e:	82 ff       	sbrs	r24, 2
     630:	f7 cf       	rjmp	.-18     	; 0x620 <Endpoint_Write_Control_Stream_LE+0xaa>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	08 95       	ret
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	08 95       	ret
     63a:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     63c:	08 95       	ret

0000063e <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     63e:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     640:	40 91 4e 02 	lds	r20, 0x024E
     644:	50 91 4f 02 	lds	r21, 0x024F
     648:	46 17       	cp	r20, r22
     64a:	57 07       	cpc	r21, r23
     64c:	18 f4       	brcc	.+6      	; 0x654 <Endpoint_Write_Control_PStream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     64e:	f9 01       	movw	r30, r18
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	45 c0       	rjmp	.+138    	; 0x6de <Endpoint_Write_Control_PStream_LE+0xa0>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     654:	61 15       	cp	r22, r1
     656:	71 05       	cpc	r23, r1
     658:	11 f0       	breq	.+4      	; 0x65e <Endpoint_Write_Control_PStream_LE+0x20>
     65a:	ab 01       	movw	r20, r22
     65c:	f8 cf       	rjmp	.-16     	; 0x64e <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     65e:	80 91 e8 00 	lds	r24, 0x00E8
     662:	8e 77       	andi	r24, 0x7E	; 126
     664:	80 93 e8 00 	sts	0x00E8, r24
     668:	40 e0       	ldi	r20, 0x00	; 0
     66a:	50 e0       	ldi	r21, 0x00	; 0
     66c:	f0 cf       	rjmp	.-32     	; 0x64e <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     66e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     670:	88 23       	and	r24, r24
     672:	09 f4       	brne	.+2      	; 0x676 <Endpoint_Write_Control_PStream_LE+0x38>
     674:	46 c0       	rjmp	.+140    	; 0x702 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     676:	85 30       	cpi	r24, 0x05	; 5
     678:	09 f4       	brne	.+2      	; 0x67c <Endpoint_Write_Control_PStream_LE+0x3e>
     67a:	45 c0       	rjmp	.+138    	; 0x706 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     67c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     680:	83 ff       	sbrs	r24, 3
     682:	02 c0       	rjmp	.+4      	; 0x688 <Endpoint_Write_Control_PStream_LE+0x4a>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     688:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     68c:	82 fd       	sbrc	r24, 2
     68e:	33 c0       	rjmp	.+102    	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0xb8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     690:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     694:	80 ff       	sbrs	r24, 0
     696:	23 c0       	rjmp	.+70     	; 0x6de <Endpoint_Write_Control_PStream_LE+0xa0>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     698:	80 91 f3 00 	lds	r24, 0x00F3
     69c:	90 91 f2 00 	lds	r25, 0x00F2
     6a0:	78 2f       	mov	r23, r24
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	29 2f       	mov	r18, r25
     6a6:	30 e0       	ldi	r19, 0x00	; 0
     6a8:	26 2b       	or	r18, r22
     6aa:	37 2b       	or	r19, r23
     6ac:	08 c0       	rjmp	.+16     	; 0x6be <Endpoint_Write_Control_PStream_LE+0x80>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     6ae:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     6b0:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     6b4:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     6b6:	41 50       	subi	r20, 0x01	; 1
     6b8:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     6ba:	2f 5f       	subi	r18, 0xFF	; 255
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     6be:	41 15       	cp	r20, r1
     6c0:	51 05       	cpc	r21, r1
     6c2:	19 f0       	breq	.+6      	; 0x6ca <Endpoint_Write_Control_PStream_LE+0x8c>
     6c4:	28 30       	cpi	r18, 0x08	; 8
     6c6:	31 05       	cpc	r19, r1
     6c8:	90 f3       	brcs	.-28     	; 0x6ae <Endpoint_Write_Control_PStream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	28 30       	cpi	r18, 0x08	; 8
     6ce:	31 05       	cpc	r19, r1
     6d0:	09 f4       	brne	.+2      	; 0x6d4 <Endpoint_Write_Control_PStream_LE+0x96>
     6d2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6d4:	80 91 e8 00 	lds	r24, 0x00E8
     6d8:	8e 77       	andi	r24, 0x7E	; 126
     6da:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     6de:	41 15       	cp	r20, r1
     6e0:	51 05       	cpc	r21, r1
     6e2:	29 f6       	brne	.-118    	; 0x66e <Endpoint_Write_Control_PStream_LE+0x30>
     6e4:	99 23       	and	r25, r25
     6e6:	09 f0       	breq	.+2      	; 0x6ea <Endpoint_Write_Control_PStream_LE+0xac>
     6e8:	c2 cf       	rjmp	.-124    	; 0x66e <Endpoint_Write_Control_PStream_LE+0x30>
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <Endpoint_Write_Control_PStream_LE+0xb8>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     6ec:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     6ee:	88 23       	and	r24, r24
     6f0:	41 f0       	breq	.+16     	; 0x702 <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     6f2:	85 30       	cpi	r24, 0x05	; 5
     6f4:	41 f0       	breq	.+16     	; 0x706 <Endpoint_Write_Control_PStream_LE+0xc8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6f6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     6fa:	82 ff       	sbrs	r24, 2
     6fc:	f7 cf       	rjmp	.-18     	; 0x6ec <Endpoint_Write_Control_PStream_LE+0xae>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	08 95       	ret
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	08 95       	ret
     706:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     708:	08 95       	ret

0000070a <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     70a:	38 2f       	mov	r19, r24
     70c:	28 2f       	mov	r18, r24
     70e:	2e c0       	rjmp	.+92     	; 0x76c <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     710:	82 2f       	mov	r24, r18
     712:	8f 70       	andi	r24, 0x0F	; 15
     714:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     718:	23 17       	cp	r18, r19
     71a:	21 f4       	brne	.+8      	; 0x724 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     71c:	76 2f       	mov	r23, r22
     71e:	94 2f       	mov	r25, r20
     720:	50 e0       	ldi	r21, 0x00	; 0
     722:	06 c0       	rjmp	.+12     	; 0x730 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     724:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     728:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     72c:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     730:	91 ff       	sbrs	r25, 1
     732:	1b c0       	rjmp	.+54     	; 0x76a <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     734:	80 91 eb 00 	lds	r24, 0x00EB
     738:	8e 7f       	andi	r24, 0xFE	; 254
     73a:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     73e:	80 91 ed 00 	lds	r24, 0x00ED
     742:	8d 7f       	andi	r24, 0xFD	; 253
     744:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     748:	80 91 eb 00 	lds	r24, 0x00EB
     74c:	81 60       	ori	r24, 0x01	; 1
     74e:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     752:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     756:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     75a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     75e:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     762:	87 fd       	sbrc	r24, 7
     764:	02 c0       	rjmp	.+4      	; 0x76a <Endpoint_ConfigureEndpoint_Prv+0x60>
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     76a:	2f 5f       	subi	r18, 0xFF	; 255
     76c:	27 30       	cpi	r18, 0x07	; 7
     76e:	80 f2       	brcs	.-96     	; 0x710 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     770:	3f 70       	andi	r19, 0x0F	; 15
     772:	30 93 e9 00 	sts	0x00E9, r19
     776:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     778:	08 95       	ret

0000077a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     77a:	0f 93       	push	r16
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	06 2f       	mov	r16, r22
     784:	ec 01       	movw	r28, r24
     786:	10 e0       	ldi	r17, 0x00	; 0
     788:	2a c0       	rjmp	.+84     	; 0x7de <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     78a:	98 81       	ld	r25, Y
     78c:	99 23       	and	r25, r25
     78e:	29 f1       	breq	.+74     	; 0x7da <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     790:	6b 81       	ldd	r22, Y+3	; 0x03
     792:	e9 81       	ldd	r30, Y+1	; 0x01
     794:	fa 81       	ldd	r31, Y+2	; 0x02
     796:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     798:	89 2f       	mov	r24, r25
     79a:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     79c:	87 30       	cpi	r24, 0x07	; 7
     79e:	18 f5       	brcc	.+70     	; 0x7e6 <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7a0:	22 30       	cpi	r18, 0x02	; 2
     7a2:	10 f4       	brcc	.+4      	; 0x7a8 <Endpoint_ConfigureEndpointTable+0x2e>
     7a4:	52 e0       	ldi	r21, 0x02	; 2
     7a6:	01 c0       	rjmp	.+2      	; 0x7aa <Endpoint_ConfigureEndpointTable+0x30>
     7a8:	56 e0       	ldi	r21, 0x06	; 6
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	28 e0       	ldi	r18, 0x08	; 8
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	03 c0       	rjmp	.+6      	; 0x7b8 <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     7b2:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     7b4:	22 0f       	add	r18, r18
     7b6:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     7b8:	2e 17       	cp	r18, r30
     7ba:	3f 07       	cpc	r19, r31
     7bc:	d0 f3       	brcs	.-12     	; 0x7b2 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     7be:	62 95       	swap	r22
     7c0:	66 0f       	add	r22, r22
     7c2:	66 0f       	add	r22, r22
     7c4:	60 7c       	andi	r22, 0xC0	; 192
     7c6:	99 1f       	adc	r25, r25
     7c8:	99 27       	eor	r25, r25
     7ca:	99 1f       	adc	r25, r25
     7cc:	69 2b       	or	r22, r25
     7ce:	42 95       	swap	r20
     7d0:	40 7f       	andi	r20, 0xF0	; 240
     7d2:	45 2b       	or	r20, r21
     7d4:	9a df       	rcall	.-204    	; 0x70a <Endpoint_ConfigureEndpoint_Prv>
     7d6:	88 23       	and	r24, r24
     7d8:	31 f0       	breq	.+12     	; 0x7e6 <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     7da:	1f 5f       	subi	r17, 0xFF	; 255
     7dc:	25 96       	adiw	r28, 0x05	; 5
     7de:	10 17       	cp	r17, r16
     7e0:	a0 f2       	brcs	.-88     	; 0x78a <Endpoint_ConfigureEndpointTable+0x10>
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <Endpoint_ConfigureEndpointTable+0x6e>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	1f 91       	pop	r17
     7ee:	0f 91       	pop	r16
     7f0:	08 95       	ret

000007f2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     7f2:	80 91 48 02 	lds	r24, 0x0248
     7f6:	88 23       	and	r24, r24
     7f8:	8c f4       	brge	.+34     	; 0x81c <Endpoint_ClearStatusStage+0x2a>
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     7fc:	8e b3       	in	r24, 0x1e	; 30
     7fe:	88 23       	and	r24, r24
     800:	b1 f0       	breq	.+44     	; 0x82e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     802:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     806:	82 ff       	sbrs	r24, 2
     808:	f9 cf       	rjmp	.-14     	; 0x7fc <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     80a:	80 91 e8 00 	lds	r24, 0x00E8
     80e:	8b 77       	andi	r24, 0x7B	; 123
     810:	80 93 e8 00 	sts	0x00E8, r24
     814:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     816:	8e b3       	in	r24, 0x1e	; 30
     818:	88 23       	and	r24, r24
     81a:	49 f0       	breq	.+18     	; 0x82e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     81c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     820:	80 ff       	sbrs	r24, 0
     822:	f9 cf       	rjmp	.-14     	; 0x816 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     824:	80 91 e8 00 	lds	r24, 0x00E8
     828:	8e 77       	andi	r24, 0x7E	; 126
     82a:	80 93 e8 00 	sts	0x00E8, r24
     82e:	08 95       	ret

00000830 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     830:	40 91 e4 00 	lds	r20, 0x00E4
     834:	50 91 e5 00 	lds	r21, 0x00E5
     838:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     83a:	80 91 ec 00 	lds	r24, 0x00EC
     83e:	80 ff       	sbrs	r24, 0
     840:	23 c0       	rjmp	.+70     	; 0x888 <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     842:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     846:	80 fd       	sbrc	r24, 0
     848:	1d c0       	rjmp	.+58     	; 0x884 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     84a:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     84c:	88 23       	and	r24, r24
     84e:	11 f4       	brne	.+4      	; 0x854 <Endpoint_WaitUntilReady+0x24>
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     854:	85 30       	cpi	r24, 0x05	; 5
     856:	11 f4       	brne	.+4      	; 0x85c <Endpoint_WaitUntilReady+0x2c>
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     85c:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     860:	85 ff       	sbrs	r24, 5
     862:	02 c0       	rjmp	.+4      	; 0x868 <Endpoint_WaitUntilReady+0x38>
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret
     868:	80 91 e4 00 	lds	r24, 0x00E4
     86c:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     870:	84 17       	cp	r24, r20
     872:	95 07       	cpc	r25, r21
     874:	11 f3       	breq	.-60     	; 0x83a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     876:	22 23       	and	r18, r18
     878:	11 f4       	brne	.+4      	; 0x87e <Endpoint_WaitUntilReady+0x4e>
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	08 95       	ret
     87e:	21 50       	subi	r18, 0x01	; 1
     880:	ac 01       	movw	r20, r24
     882:	db cf       	rjmp	.-74     	; 0x83a <Endpoint_WaitUntilReady+0xa>
     884:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     886:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     888:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     88c:	82 ff       	sbrs	r24, 2
     88e:	dd cf       	rjmp	.-70     	; 0x84a <Endpoint_WaitUntilReady+0x1a>
     890:	f9 cf       	rjmp	.-14     	; 0x884 <Endpoint_WaitUntilReady+0x54>

00000892 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     892:	ef 92       	push	r14
     894:	ff 92       	push	r15
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     89a:	4e d0       	rcall	.+156    	; 0x938 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     89c:	55 d0       	rcall	.+170    	; 0x948 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     89e:	08 ed       	ldi	r16, 0xD8	; 216
     8a0:	10 e0       	ldi	r17, 0x00	; 0
     8a2:	f8 01       	movw	r30, r16
     8a4:	80 81       	ld	r24, Z
     8a6:	8f 77       	andi	r24, 0x7F	; 127
     8a8:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     8aa:	80 81       	ld	r24, Z
     8ac:	80 68       	ori	r24, 0x80	; 128
     8ae:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8b0:	80 81       	ld	r24, Z
     8b2:	8f 7d       	andi	r24, 0xDF	; 223
     8b4:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8b6:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     8b8:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     8ba:	10 92 44 02 	sts	0x0244, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     8be:	10 92 46 02 	sts	0x0246, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     8c2:	10 92 45 02 	sts	0x0245, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     8c6:	80 ee       	ldi	r24, 0xE0	; 224
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	f7 01       	movw	r30, r14
     8ce:	80 81       	ld	r24, Z
     8d0:	8b 7f       	andi	r24, 0xFB	; 251
     8d2:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     8d4:	f8 01       	movw	r30, r16
     8d6:	80 81       	ld	r24, Z
     8d8:	81 60       	ori	r24, 0x01	; 1
     8da:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	60 e0       	ldi	r22, 0x00	; 0
     8e0:	42 e0       	ldi	r20, 0x02	; 2
     8e2:	13 df       	rcall	.-474    	; 0x70a <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     8e4:	e1 ee       	ldi	r30, 0xE1	; 225
     8e6:	f0 e0       	ldi	r31, 0x00	; 0
     8e8:	80 81       	ld	r24, Z
     8ea:	8e 7f       	andi	r24, 0xFE	; 254
     8ec:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     8ee:	e2 ee       	ldi	r30, 0xE2	; 226
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	81 60       	ori	r24, 0x01	; 1
     8f6:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     8f8:	80 81       	ld	r24, Z
     8fa:	88 60       	ori	r24, 0x08	; 8
     8fc:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     8fe:	f7 01       	movw	r30, r14
     900:	80 81       	ld	r24, Z
     902:	8e 7f       	andi	r24, 0xFE	; 254
     904:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     906:	f8 01       	movw	r30, r16
     908:	80 81       	ld	r24, Z
     90a:	80 61       	ori	r24, 0x10	; 16
     90c:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     90e:	1f 91       	pop	r17
     910:	0f 91       	pop	r16
     912:	ff 90       	pop	r15
     914:	ef 90       	pop	r14
     916:	08 95       	ret

00000918 <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
     918:	e8 ed       	ldi	r30, 0xD8	; 216
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	8f 7e       	andi	r24, 0xEF	; 239
     920:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     922:	e7 ed       	ldi	r30, 0xD7	; 215
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	81 60       	ori	r24, 0x01	; 1
     92a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     92c:	84 e0       	ldi	r24, 0x04	; 4
     92e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 47 02 	sts	0x0247, r24

	USB_ResetInterface();
}
     936:	ad cf       	rjmp	.-166    	; 0x892 <USB_ResetInterface>

00000938 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     938:	e8 ed       	ldi	r30, 0xD8	; 216
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	8e 7f       	andi	r24, 0xFE	; 254
     940:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     942:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     946:	08 95       	ret

00000948 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     948:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     94c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     950:	08 95       	ret

00000952 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     952:	1f 92       	push	r1
     954:	0f 92       	push	r0
     956:	0f b6       	in	r0, 0x3f	; 63
     958:	0f 92       	push	r0
     95a:	11 24       	eor	r1, r1
     95c:	1f 93       	push	r17
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	ef 93       	push	r30
     974:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     976:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     97a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     97e:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     982:	80 91 f0 00 	lds	r24, 0x00F0
     986:	87 7f       	andi	r24, 0xF7	; 247
     988:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     98c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     98e:	de d0       	rcall	.+444    	; 0xb4c <USB_Device_ProcessControlRequest>
     990:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     994:	80 91 f0 00 	lds	r24, 0x00F0
     998:	88 60       	ori	r24, 0x08	; 8
     99a:	80 93 f0 00 	sts	0x00F0, r24
     99e:	1f 70       	andi	r17, 0x0F	; 15
     9a0:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	1f 91       	pop	r17
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     9ea:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     9ee:	82 ff       	sbrs	r24, 2
     9f0:	0a c0       	rjmp	.+20     	; 0xa06 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     9f2:	80 91 e2 00 	lds	r24, 0x00E2
     9f6:	82 ff       	sbrs	r24, 2
     9f8:	06 c0       	rjmp	.+12     	; 0xa06 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     9fa:	80 91 e1 00 	lds	r24, 0x00E1
     9fe:	8b 7f       	andi	r24, 0xFB	; 251
     a00:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     a04:	09 d2       	rcall	.+1042   	; 0xe18 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     a06:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     a0a:	80 ff       	sbrs	r24, 0
     a0c:	1a c0       	rjmp	.+52     	; 0xa42 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     a0e:	80 91 d8 00 	lds	r24, 0x00D8
     a12:	80 ff       	sbrs	r24, 0
     a14:	16 c0       	rjmp	.+44     	; 0xa42 <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     a16:	80 91 da 00 	lds	r24, 0x00DA
     a1a:	8e 7f       	andi	r24, 0xFE	; 254
     a1c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     a20:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     a24:	80 ff       	sbrs	r24, 0
     a26:	0a c0       	rjmp	.+20     	; 0xa3c <__vector_10+0x74>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a28:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     a2e:	09 b4       	in	r0, 0x29	; 41
     a30:	00 fe       	sbrs	r0, 0
     a32:	fd cf       	rjmp	.-6      	; 0xa2e <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     a38:	f3 db       	rcall	.-2074   	; 0x220 <EVENT_USB_Device_Connect>
     a3a:	03 c0       	rjmp	.+6      	; 0xa42 <__vector_10+0x7a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a3c:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     a3e:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     a40:	f0 db       	rcall	.-2080   	; 0x222 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     a42:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     a46:	80 ff       	sbrs	r24, 0
     a48:	17 c0       	rjmp	.+46     	; 0xa78 <__vector_10+0xb0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     a4a:	80 91 e2 00 	lds	r24, 0x00E2
     a4e:	80 ff       	sbrs	r24, 0
     a50:	13 c0       	rjmp	.+38     	; 0xa78 <__vector_10+0xb0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     a52:	80 91 e2 00 	lds	r24, 0x00E2
     a56:	8e 7f       	andi	r24, 0xFE	; 254
     a58:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     a5c:	80 91 e2 00 	lds	r24, 0x00E2
     a60:	80 61       	ori	r24, 0x10	; 16
     a62:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     a66:	80 91 d8 00 	lds	r24, 0x00D8
     a6a:	80 62       	ori	r24, 0x20	; 32
     a6c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     a70:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     a72:	85 e0       	ldi	r24, 0x05	; 5
     a74:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     a76:	d0 d1       	rcall	.+928    	; 0xe18 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     a78:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     a7c:	84 ff       	sbrs	r24, 4
     a7e:	2b c0       	rjmp	.+86     	; 0xad6 <__vector_10+0x10e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     a80:	80 91 e2 00 	lds	r24, 0x00E2
     a84:	84 ff       	sbrs	r24, 4
     a86:	27 c0       	rjmp	.+78     	; 0xad6 <__vector_10+0x10e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     a88:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     a8e:	09 b4       	in	r0, 0x29	; 41
     a90:	00 fe       	sbrs	r0, 0
     a92:	fd cf       	rjmp	.-6      	; 0xa8e <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     a94:	80 91 d8 00 	lds	r24, 0x00D8
     a98:	8f 7d       	andi	r24, 0xDF	; 223
     a9a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     a9e:	80 91 e1 00 	lds	r24, 0x00E1
     aa2:	8f 7e       	andi	r24, 0xEF	; 239
     aa4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     aa8:	80 91 e2 00 	lds	r24, 0x00E2
     aac:	8f 7e       	andi	r24, 0xEF	; 239
     aae:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     ab2:	80 91 e2 00 	lds	r24, 0x00E2
     ab6:	81 60       	ori	r24, 0x01	; 1
     ab8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     abc:	80 91 44 02 	lds	r24, 0x0244
     ac0:	88 23       	and	r24, r24
     ac2:	31 f4       	brne	.+12     	; 0xad0 <__vector_10+0x108>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     ac4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     ac8:	87 fd       	sbrc	r24, 7
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <__vector_10+0x108>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	01 c0       	rjmp	.+2      	; 0xad2 <__vector_10+0x10a>
     ad0:	84 e0       	ldi	r24, 0x04	; 4
     ad2:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     ad4:	a1 d1       	rcall	.+834    	; 0xe18 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     ad6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     ada:	83 ff       	sbrs	r24, 3
     adc:	26 c0       	rjmp	.+76     	; 0xb2a <__stack+0x2b>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     ade:	80 91 e2 00 	lds	r24, 0x00E2
     ae2:	83 ff       	sbrs	r24, 3
     ae4:	22 c0       	rjmp	.+68     	; 0xb2a <__stack+0x2b>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     ae6:	80 91 e1 00 	lds	r24, 0x00E1
     aea:	87 7f       	andi	r24, 0xF7	; 247
     aec:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     af4:	10 92 44 02 	sts	0x0244, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     af8:	80 91 e1 00 	lds	r24, 0x00E1
     afc:	8e 7f       	andi	r24, 0xFE	; 254
     afe:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     b02:	80 91 e2 00 	lds	r24, 0x00E2
     b06:	8e 7f       	andi	r24, 0xFE	; 254
     b08:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     b0c:	80 91 e2 00 	lds	r24, 0x00E2
     b10:	80 61       	ori	r24, 0x10	; 16
     b12:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	60 e0       	ldi	r22, 0x00	; 0
     b1a:	42 e0       	ldi	r20, 0x02	; 2
     b1c:	f6 dd       	rcall	.-1044   	; 0x70a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     b1e:	80 91 f0 00 	lds	r24, 0x00F0
     b22:	88 60       	ori	r24, 0x08	; 8
     b24:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     b28:	77 d1       	rcall	.+750    	; 0xe18 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     b2a:	ff 91       	pop	r31
     b2c:	ef 91       	pop	r30
     b2e:	bf 91       	pop	r27
     b30:	af 91       	pop	r26
     b32:	9f 91       	pop	r25
     b34:	8f 91       	pop	r24
     b36:	7f 91       	pop	r23
     b38:	6f 91       	pop	r22
     b3a:	5f 91       	pop	r21
     b3c:	4f 91       	pop	r20
     b3e:	3f 91       	pop	r19
     b40:	2f 91       	pop	r18
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b4c:	1f 93       	push	r17
     b4e:	df 93       	push	r29
     b50:	cf 93       	push	r28
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	ac 97       	sbiw	r28, 0x2c	; 44
     b58:	0f b6       	in	r0, 0x3f	; 63
     b5a:	f8 94       	cli
     b5c:	de bf       	out	0x3e, r29	; 62
     b5e:	0f be       	out	0x3f, r0	; 63
     b60:	cd bf       	out	0x3d, r28	; 61
     b62:	e8 e4       	ldi	r30, 0x48	; 72
     b64:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     b66:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     b6a:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     b6c:	22 e0       	ldi	r18, 0x02	; 2
     b6e:	e0 35       	cpi	r30, 0x50	; 80
     b70:	f2 07       	cpc	r31, r18
     b72:	c9 f7       	brne	.-14     	; 0xb66 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     b74:	db db       	rcall	.-2122   	; 0x32c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b76:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     b7a:	83 ff       	sbrs	r24, 3
     b7c:	35 c1       	rjmp	.+618    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     b7e:	80 91 48 02 	lds	r24, 0x0248

		switch (USB_ControlRequest.bRequest)
     b82:	30 91 49 02 	lds	r19, 0x0249
     b86:	35 30       	cpi	r19, 0x05	; 5
     b88:	09 f4       	brne	.+2      	; 0xb8c <USB_Device_ProcessControlRequest+0x40>
     b8a:	87 c0       	rjmp	.+270    	; 0xc9a <USB_Device_ProcessControlRequest+0x14e>
     b8c:	36 30       	cpi	r19, 0x06	; 6
     b8e:	40 f4       	brcc	.+16     	; 0xba0 <USB_Device_ProcessControlRequest+0x54>
     b90:	31 30       	cpi	r19, 0x01	; 1
     b92:	c9 f1       	breq	.+114    	; 0xc06 <USB_Device_ProcessControlRequest+0xba>
     b94:	31 30       	cpi	r19, 0x01	; 1
     b96:	70 f0       	brcs	.+28     	; 0xbb4 <USB_Device_ProcessControlRequest+0x68>
     b98:	33 30       	cpi	r19, 0x03	; 3
     b9a:	09 f0       	breq	.+2      	; 0xb9e <USB_Device_ProcessControlRequest+0x52>
     b9c:	25 c1       	rjmp	.+586    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
     b9e:	33 c0       	rjmp	.+102    	; 0xc06 <USB_Device_ProcessControlRequest+0xba>
     ba0:	38 30       	cpi	r19, 0x08	; 8
     ba2:	09 f4       	brne	.+2      	; 0xba6 <USB_Device_ProcessControlRequest+0x5a>
     ba4:	f4 c0       	rjmp	.+488    	; 0xd8e <USB_Device_ProcessControlRequest+0x242>
     ba6:	39 30       	cpi	r19, 0x09	; 9
     ba8:	09 f4       	brne	.+2      	; 0xbac <USB_Device_ProcessControlRequest+0x60>
     baa:	03 c1       	rjmp	.+518    	; 0xdb2 <USB_Device_ProcessControlRequest+0x266>
     bac:	36 30       	cpi	r19, 0x06	; 6
     bae:	09 f0       	breq	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x66>
     bb0:	1b c1       	rjmp	.+566    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
     bb2:	95 c0       	rjmp	.+298    	; 0xcde <USB_Device_ProcessControlRequest+0x192>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bb4:	80 38       	cpi	r24, 0x80	; 128
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <USB_Device_ProcessControlRequest+0x74>
     bb8:	82 38       	cpi	r24, 0x82	; 130
     bba:	09 f0       	breq	.+2      	; 0xbbe <USB_Device_ProcessControlRequest+0x72>
     bbc:	15 c1       	rjmp	.+554    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
     bbe:	08 c0       	rjmp	.+16     	; 0xbd0 <USB_Device_ProcessControlRequest+0x84>
     bc0:	90 91 45 02 	lds	r25, 0x0245
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     bc4:	80 91 46 02 	lds	r24, 0x0246
     bc8:	88 23       	and	r24, r24
     bca:	99 f0       	breq	.+38     	; 0xbf2 <USB_Device_ProcessControlRequest+0xa6>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     bcc:	92 60       	ori	r25, 0x02	; 2
     bce:	11 c0       	rjmp	.+34     	; 0xbf2 <USB_Device_ProcessControlRequest+0xa6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bd0:	80 91 4c 02 	lds	r24, 0x024C
     bd4:	8f 70       	andi	r24, 0x0F	; 15
     bd6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     bda:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	25 e0       	ldi	r18, 0x05	; 5
     be2:	96 95       	lsr	r25
     be4:	87 95       	ror	r24
     be6:	2a 95       	dec	r18
     be8:	e1 f7       	brne	.-8      	; 0xbe2 <USB_Device_ProcessControlRequest+0x96>
     bea:	98 2f       	mov	r25, r24
     bec:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bee:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     bf2:	80 91 e8 00 	lds	r24, 0x00E8
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     bfc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     c00:	10 92 f1 00 	sts	0x00F1, r1
     c04:	cf c0       	rjmp	.+414    	; 0xda4 <USB_Device_ProcessControlRequest+0x258>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c06:	88 23       	and	r24, r24
     c08:	19 f0       	breq	.+6      	; 0xc10 <USB_Device_ProcessControlRequest+0xc4>
     c0a:	82 30       	cpi	r24, 0x02	; 2
     c0c:	09 f0       	breq	.+2      	; 0xc10 <USB_Device_ProcessControlRequest+0xc4>
     c0e:	ec c0       	rjmp	.+472    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	8f 71       	andi	r24, 0x1F	; 31
     c14:	90 70       	andi	r25, 0x00	; 0
     c16:	00 97       	sbiw	r24, 0x00	; 0
     c18:	21 f0       	breq	.+8      	; 0xc22 <USB_Device_ProcessControlRequest+0xd6>
     c1a:	02 97       	sbiw	r24, 0x02	; 2
     c1c:	09 f0       	breq	.+2      	; 0xc20 <USB_Device_ProcessControlRequest+0xd4>
     c1e:	e4 c0       	rjmp	.+456    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
     c20:	0c c0       	rjmp	.+24     	; 0xc3a <USB_Device_ProcessControlRequest+0xee>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c22:	80 91 4a 02 	lds	r24, 0x024A
     c26:	81 30       	cpi	r24, 0x01	; 1
     c28:	09 f0       	breq	.+2      	; 0xc2c <USB_Device_ProcessControlRequest+0xe0>
     c2a:	de c0       	rjmp	.+444    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c2c:	10 92 46 02 	sts	0x0246, r1
     c30:	33 30       	cpi	r19, 0x03	; 3
     c32:	69 f5       	brne	.+90     	; 0xc8e <USB_Device_ProcessControlRequest+0x142>
     c34:	80 93 46 02 	sts	0x0246, r24
     c38:	2a c0       	rjmp	.+84     	; 0xc8e <USB_Device_ProcessControlRequest+0x142>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c3a:	80 91 4a 02 	lds	r24, 0x024A
     c3e:	88 23       	and	r24, r24
     c40:	31 f5       	brne	.+76     	; 0xc8e <USB_Device_ProcessControlRequest+0x142>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c42:	20 91 4c 02 	lds	r18, 0x024C
     c46:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c48:	09 f4       	brne	.+2      	; 0xc4c <USB_Device_ProcessControlRequest+0x100>
     c4a:	ce c0       	rjmp	.+412    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c4c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c50:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c54:	80 ff       	sbrs	r24, 0
     c56:	1b c0       	rjmp	.+54     	; 0xc8e <USB_Device_ProcessControlRequest+0x142>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     c58:	33 30       	cpi	r19, 0x03	; 3
     c5a:	21 f4       	brne	.+8      	; 0xc64 <USB_Device_ProcessControlRequest+0x118>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     c5c:	80 91 eb 00 	lds	r24, 0x00EB
     c60:	80 62       	ori	r24, 0x20	; 32
     c62:	13 c0       	rjmp	.+38     	; 0xc8a <USB_Device_ProcessControlRequest+0x13e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     c64:	80 91 eb 00 	lds	r24, 0x00EB
     c68:	80 61       	ori	r24, 0x10	; 16
     c6a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <USB_Device_ProcessControlRequest+0x12c>
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	2a 95       	dec	r18
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <USB_Device_ProcessControlRequest+0x128>
     c7c:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     c80:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     c84:	80 91 eb 00 	lds	r24, 0x00EB
     c88:	88 60       	ori	r24, 0x08	; 8
     c8a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c8e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c92:	80 91 e8 00 	lds	r24, 0x00E8
     c96:	87 7f       	andi	r24, 0xF7	; 247
     c98:	88 c0       	rjmp	.+272    	; 0xdaa <USB_Device_ProcessControlRequest+0x25e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     c9a:	88 23       	and	r24, r24
     c9c:	09 f0       	breq	.+2      	; 0xca0 <USB_Device_ProcessControlRequest+0x154>
     c9e:	a4 c0       	rjmp	.+328    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ca0:	10 91 4a 02 	lds	r17, 0x024A
     ca4:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ca6:	80 91 e3 00 	lds	r24, 0x00E3
     caa:	80 78       	andi	r24, 0x80	; 128
     cac:	81 2b       	or	r24, r17
     cae:	80 93 e3 00 	sts	0x00E3, r24
     cb2:	80 91 e8 00 	lds	r24, 0x00E8
     cb6:	87 7f       	andi	r24, 0xF7	; 247
     cb8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     cbc:	9a dd       	rcall	.-1228   	; 0x7f2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     cbe:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     cc2:	80 ff       	sbrs	r24, 0
     cc4:	fc cf       	rjmp	.-8      	; 0xcbe <USB_Device_ProcessControlRequest+0x172>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
     cc6:	80 91 e3 00 	lds	r24, 0x00E3
     cca:	80 68       	ori	r24, 0x80	; 128
     ccc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     cd0:	11 23       	and	r17, r17
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <USB_Device_ProcessControlRequest+0x18c>
     cd4:	82 e0       	ldi	r24, 0x02	; 2
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <USB_Device_ProcessControlRequest+0x18e>
     cd8:	83 e0       	ldi	r24, 0x03	; 3
     cda:	8e bb       	out	0x1e, r24	; 30
     cdc:	85 c0       	rjmp	.+266    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     cde:	80 58       	subi	r24, 0x80	; 128
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <USB_Device_ProcessControlRequest+0x19a>
     ce4:	81 c0       	rjmp	.+258    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     ce6:	80 91 4a 02 	lds	r24, 0x024A
     cea:	90 91 4b 02 	lds	r25, 0x024B
     cee:	23 e0       	ldi	r18, 0x03	; 3
     cf0:	8c 3d       	cpi	r24, 0xDC	; 220
     cf2:	92 07       	cpc	r25, r18
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <USB_Device_ProcessControlRequest+0x1ac>
     cf6:	33 c0       	rjmp	.+102    	; 0xd5e <USB_Device_ProcessControlRequest+0x212>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     cf8:	83 e0       	ldi	r24, 0x03	; 3
     cfa:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     cfc:	8a e2       	ldi	r24, 0x2A	; 42
     cfe:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d00:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d02:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d04:	de 01       	movw	r26, r28
     d06:	15 96       	adiw	r26, 0x05	; 5
     d08:	6e e0       	ldi	r22, 0x0E	; 14
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d0e:	11 e2       	ldi	r17, 0x21	; 33
     d10:	e6 2f       	mov	r30, r22
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	10 93 57 00 	sts	0x0057, r17
     d18:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     d1a:	40 ff       	sbrs	r20, 0
     d1c:	03 c0       	rjmp	.+6      	; 0xd24 <USB_Device_ProcessControlRequest+0x1d8>
					{
						SerialByte >>= 4;
     d1e:	82 95       	swap	r24
     d20:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     d22:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d24:	8f 70       	andi	r24, 0x0F	; 15
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d2a:	8a 30       	cpi	r24, 0x0A	; 10
     d2c:	18 f0       	brcs	.+6      	; 0xd34 <USB_Device_ProcessControlRequest+0x1e8>
     d2e:	c9 01       	movw	r24, r18
     d30:	c7 96       	adiw	r24, 0x37	; 55
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <USB_Device_ProcessControlRequest+0x1ec>
     d34:	c9 01       	movw	r24, r18
     d36:	c0 96       	adiw	r24, 0x30	; 48
     d38:	8d 93       	st	X+, r24
     d3a:	9d 93       	st	X+, r25
     d3c:	4f 5f       	subi	r20, 0xFF	; 255
     d3e:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d40:	44 31       	cpi	r20, 0x14	; 20
     d42:	51 05       	cpc	r21, r1
     d44:	29 f7       	brne	.-54     	; 0xd10 <USB_Device_ProcessControlRequest+0x1c4>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d46:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d48:	80 91 e8 00 	lds	r24, 0x00E8
     d4c:	87 7f       	andi	r24, 0xF7	; 247
     d4e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     d52:	ce 01       	movw	r24, r28
     d54:	03 96       	adiw	r24, 0x03	; 3
     d56:	6a e2       	ldi	r22, 0x2A	; 42
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	0d dc       	rcall	.-2022   	; 0x576 <Endpoint_Write_Control_Stream_LE>
     d5c:	12 c0       	rjmp	.+36     	; 0xd82 <USB_Device_ProcessControlRequest+0x236>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     d5e:	60 91 4c 02 	lds	r22, 0x024C
     d62:	ae 01       	movw	r20, r28
     d64:	4f 5f       	subi	r20, 0xFF	; 255
     d66:	5f 4f       	sbci	r21, 0xFF	; 255
     d68:	d8 db       	rcall	.-2128   	; 0x51a <CALLBACK_USB_GetDescriptor>
     d6a:	bc 01       	movw	r22, r24
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	09 f4       	brne	.+2      	; 0xd72 <USB_Device_ProcessControlRequest+0x226>
     d70:	3b c0       	rjmp	.+118    	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
     d72:	80 91 e8 00 	lds	r24, 0x00E8
     d76:	87 7f       	andi	r24, 0xF7	; 247
     d78:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     d7c:	89 81       	ldd	r24, Y+1	; 0x01
     d7e:	9a 81       	ldd	r25, Y+2	; 0x02
     d80:	5e dc       	rcall	.-1860   	; 0x63e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     d82:	80 91 e8 00 	lds	r24, 0x00E8
     d86:	8b 77       	andi	r24, 0x7B	; 123
     d88:	80 93 e8 00 	sts	0x00E8, r24
     d8c:	2d c0       	rjmp	.+90     	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     d8e:	80 38       	cpi	r24, 0x80	; 128
     d90:	59 f5       	brne	.+86     	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d92:	80 91 e8 00 	lds	r24, 0x00E8
     d96:	87 7f       	andi	r24, 0xF7	; 247
     d98:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     d9c:	80 91 44 02 	lds	r24, 0x0244
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     da0:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     da4:	80 91 e8 00 	lds	r24, 0x00E8
     da8:	8e 77       	andi	r24, 0x7E	; 126
     daa:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     dae:	21 dd       	rcall	.-1470   	; 0x7f2 <Endpoint_ClearStatusStage>
     db0:	1b c0       	rjmp	.+54     	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     db2:	88 23       	and	r24, r24
     db4:	c9 f4       	brne	.+50     	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     db6:	90 91 4a 02 	lds	r25, 0x024A
     dba:	92 30       	cpi	r25, 0x02	; 2
     dbc:	a8 f4       	brcc	.+42     	; 0xde8 <USB_Device_ProcessControlRequest+0x29c>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     dbe:	80 91 e8 00 	lds	r24, 0x00E8
     dc2:	87 7f       	andi	r24, 0xF7	; 247
     dc4:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     dc8:	90 93 44 02 	sts	0x0244, r25

	Endpoint_ClearStatusStage();
     dcc:	12 dd       	rcall	.-1500   	; 0x7f2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     dce:	80 91 44 02 	lds	r24, 0x0244
     dd2:	88 23       	and	r24, r24
     dd4:	31 f4       	brne	.+12     	; 0xde2 <USB_Device_ProcessControlRequest+0x296>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     dd6:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     dda:	87 fd       	sbrc	r24, 7
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <USB_Device_ProcessControlRequest+0x296>
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <USB_Device_ProcessControlRequest+0x298>
     de2:	84 e0       	ldi	r24, 0x04	; 4
     de4:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     de6:	a5 da       	rcall	.-2742   	; 0x332 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     de8:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     dec:	83 ff       	sbrs	r24, 3
     dee:	0a c0       	rjmp	.+20     	; 0xe04 <USB_Device_ProcessControlRequest+0x2b8>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     df0:	80 91 e8 00 	lds	r24, 0x00E8
     df4:	87 7f       	andi	r24, 0xF7	; 247
     df6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     dfa:	80 91 eb 00 	lds	r24, 0x00EB
     dfe:	80 62       	ori	r24, 0x20	; 32
     e00:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     e04:	ac 96       	adiw	r28, 0x2c	; 44
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	1f 91       	pop	r17
     e16:	08 95       	ret

00000e18 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     e18:	08 95       	ret

00000e1a <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e1a:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     e1c:	8e b3       	in	r24, 0x1e	; 30
     e1e:	88 23       	and	r24, r24
     e20:	71 f0       	breq	.+28     	; 0xe3e <USB_USBTask+0x24>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e22:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e26:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e2a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e2e:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     e32:	83 ff       	sbrs	r24, 3
     e34:	01 c0       	rjmp	.+2      	; 0xe38 <USB_USBTask+0x1e>
	  USB_Device_ProcessControlRequest();
     e36:	8a de       	rcall	.-748    	; 0xb4c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e38:	1f 70       	andi	r17, 0x0F	; 15
     e3a:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
     e3e:	1f 91       	pop	r17
     e40:	08 95       	ret

00000e42 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e42:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e44:	8e b3       	in	r24, 0x1e	; 30
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	99 f5       	brne	.+102    	; 0xeb0 <CDC_Device_ReceiveByte+0x6e>
     e4a:	84 89       	ldd	r24, Z+20	; 0x14
     e4c:	95 89       	ldd	r25, Z+21	; 0x15
     e4e:	a6 89       	ldd	r26, Z+22	; 0x16
     e50:	b7 89       	ldd	r27, Z+23	; 0x17
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	a1 05       	cpc	r26, r1
     e56:	b1 05       	cpc	r27, r1
     e58:	59 f1       	breq	.+86     	; 0xeb0 <CDC_Device_ReceiveByte+0x6e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e5a:	86 81       	ldd	r24, Z+6	; 0x06
     e5c:	8f 70       	andi	r24, 0x0F	; 15
     e5e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     e62:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     e66:	82 ff       	sbrs	r24, 2
     e68:	23 c0       	rjmp	.+70     	; 0xeb0 <CDC_Device_ReceiveByte+0x6e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     e6a:	40 91 f3 00 	lds	r20, 0x00F3
     e6e:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     e72:	94 2f       	mov	r25, r20
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	82 2b       	or	r24, r18
     e7a:	93 2b       	or	r25, r19
     e7c:	89 2b       	or	r24, r25
     e7e:	19 f4       	brne	.+6      	; 0xe86 <CDC_Device_ReceiveByte+0x44>
     e80:	6f ef       	ldi	r22, 0xFF	; 255
     e82:	7f ef       	ldi	r23, 0xFF	; 255
     e84:	04 c0       	rjmp	.+8      	; 0xe8e <CDC_Device_ReceiveByte+0x4c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     e86:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     e8a:	68 2f       	mov	r22, r24
     e8c:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     e8e:	40 91 f3 00 	lds	r20, 0x00F3
     e92:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     e96:	94 2f       	mov	r25, r20
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	82 2b       	or	r24, r18
     e9e:	93 2b       	or	r25, r19
     ea0:	89 2b       	or	r24, r25
     ea2:	41 f4       	brne	.+16     	; 0xeb4 <CDC_Device_ReceiveByte+0x72>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ea4:	80 91 e8 00 	lds	r24, 0x00E8
     ea8:	8b 77       	andi	r24, 0x7B	; 123
     eaa:	80 93 e8 00 	sts	0x00E8, r24
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <CDC_Device_ReceiveByte+0x72>
     eb0:	6f ef       	ldi	r22, 0xFF	; 255
     eb2:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     eb4:	cb 01       	movw	r24, r22
     eb6:	08 95       	ret

00000eb8 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
     eb8:	08 95       	ret

00000eba <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     eba:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ebc:	8e b3       	in	r24, 0x1e	; 30
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	51 f5       	brne	.+84     	; 0xf16 <CDC_Device_Flush+0x5c>
     ec2:	84 89       	ldd	r24, Z+20	; 0x14
     ec4:	95 89       	ldd	r25, Z+21	; 0x15
     ec6:	a6 89       	ldd	r26, Z+22	; 0x16
     ec8:	b7 89       	ldd	r27, Z+23	; 0x17
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	a1 05       	cpc	r26, r1
     ece:	b1 05       	cpc	r27, r1
     ed0:	11 f1       	breq	.+68     	; 0xf16 <CDC_Device_Flush+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	8f 70       	andi	r24, 0x0F	; 15
     ed6:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     eda:	40 91 f3 00 	lds	r20, 0x00F3
     ede:	20 91 f2 00 	lds	r18, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     ee2:	94 2f       	mov	r25, r20
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	82 2b       	or	r24, r18
     eea:	93 2b       	or	r25, r19
     eec:	89 2b       	or	r24, r25
     eee:	a9 f0       	breq	.+42     	; 0xf1a <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     ef0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ef4:	80 91 e8 00 	lds	r24, 0x00E8
     ef8:	8e 77       	andi	r24, 0x7E	; 126
     efa:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     efe:	95 fd       	sbrc	r25, 5
     f00:	0c c0       	rjmp	.+24     	; 0xf1a <CDC_Device_Flush+0x60>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f02:	96 dc       	rcall	.-1748   	; 0x830 <Endpoint_WaitUntilReady>
     f04:	98 2f       	mov	r25, r24
     f06:	88 23       	and	r24, r24
     f08:	49 f4       	brne	.+18     	; 0xf1c <CDC_Device_Flush+0x62>
     f0a:	80 91 e8 00 	lds	r24, 0x00E8
     f0e:	8e 77       	andi	r24, 0x7E	; 126
     f10:	80 93 e8 00 	sts	0x00E8, r24
     f14:	03 c0       	rjmp	.+6      	; 0xf1c <CDC_Device_Flush+0x62>
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <CDC_Device_Flush+0x62>
     f1a:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     f1c:	89 2f       	mov	r24, r25
     f1e:	08 95       	ret

00000f20 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f20:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f22:	8e b3       	in	r24, 0x1e	; 30
     f24:	84 30       	cpi	r24, 0x04	; 4
     f26:	91 f4       	brne	.+36     	; 0xf4c <CDC_Device_USBTask+0x2c>
     f28:	84 89       	ldd	r24, Z+20	; 0x14
     f2a:	95 89       	ldd	r25, Z+21	; 0x15
     f2c:	a6 89       	ldd	r26, Z+22	; 0x16
     f2e:	b7 89       	ldd	r27, Z+23	; 0x17
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	a1 05       	cpc	r26, r1
     f34:	b1 05       	cpc	r27, r1
     f36:	51 f0       	breq	.+20     	; 0xf4c <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f38:	81 81       	ldd	r24, Z+1	; 0x01
     f3a:	8f 70       	andi	r24, 0x0F	; 15
     f3c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     f40:	80 91 e8 00 	lds	r24, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
     f44:	80 ff       	sbrs	r24, 0
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
     f48:	cf 01       	movw	r24, r30
     f4a:	b7 cf       	rjmp	.-146    	; 0xeba <CDC_Device_Flush>
     f4c:	08 95       	ret

00000f4e <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     f4e:	1f 93       	push	r17
     f50:	fc 01       	movw	r30, r24
     f52:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f54:	8e b3       	in	r24, 0x1e	; 30
     f56:	84 30       	cpi	r24, 0x04	; 4
     f58:	e1 f4       	brne	.+56     	; 0xf92 <CDC_Device_SendByte+0x44>
     f5a:	84 89       	ldd	r24, Z+20	; 0x14
     f5c:	95 89       	ldd	r25, Z+21	; 0x15
     f5e:	a6 89       	ldd	r26, Z+22	; 0x16
     f60:	b7 89       	ldd	r27, Z+23	; 0x17
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	a1 05       	cpc	r26, r1
     f66:	b1 05       	cpc	r27, r1
     f68:	a1 f0       	breq	.+40     	; 0xf92 <CDC_Device_SendByte+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f6a:	81 81       	ldd	r24, Z+1	; 0x01
     f6c:	8f 70       	andi	r24, 0x0F	; 15
     f6e:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f72:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     f76:	85 fd       	sbrc	r24, 5
     f78:	08 c0       	rjmp	.+16     	; 0xf8a <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f7a:	80 91 e8 00 	lds	r24, 0x00E8
     f7e:	8e 77       	andi	r24, 0x7E	; 126
     f80:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f84:	55 dc       	rcall	.-1878   	; 0x830 <Endpoint_WaitUntilReady>
     f86:	88 23       	and	r24, r24
     f88:	29 f4       	brne	.+10     	; 0xf94 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f8a:	10 93 f1 00 	sts	0x00F1, r17
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	01 c0       	rjmp	.+2      	; 0xf94 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f92:	82 e0       	ldi	r24, 0x02	; 2
}
     f94:	1f 91       	pop	r17
     f96:	08 95       	ret

00000f98 <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
     f9c:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     f9e:	40 96       	adiw	r24, 0x10	; 16
     fa0:	fc 01       	movw	r30, r24
     fa2:	8b e0       	ldi	r24, 0x0B	; 11
     fa4:	df 01       	movw	r26, r30
     fa6:	1d 92       	st	X+, r1
     fa8:	8a 95       	dec	r24
     faa:	e9 f7       	brne	.-6      	; 0xfa6 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     fac:	82 e0       	ldi	r24, 0x02	; 2
     fae:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     fb0:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	de db       	rcall	.-2116   	; 0x77a <Endpoint_ConfigureEndpointTable>
     fbe:	88 23       	and	r24, r24
     fc0:	71 f0       	breq	.+28     	; 0xfde <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     fc2:	ce 01       	movw	r24, r28
     fc4:	06 96       	adiw	r24, 0x06	; 6
     fc6:	61 e0       	ldi	r22, 0x01	; 1
     fc8:	d8 db       	rcall	.-2128   	; 0x77a <Endpoint_ConfigureEndpointTable>
     fca:	88 23       	and	r24, r24
     fcc:	41 f0       	breq	.+16     	; 0xfde <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     fce:	ce 01       	movw	r24, r28
     fd0:	0b 96       	adiw	r24, 0x0b	; 11
     fd2:	61 e0       	ldi	r22, 0x01	; 1
     fd4:	d2 db       	rcall	.-2140   	; 0x77a <Endpoint_ConfigureEndpointTable>
     fd6:	88 23       	and	r24, r24
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <CDC_Device_ConfigureEndpoints+0x48>
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	01 c0       	rjmp	.+2      	; 0xfe0 <CDC_Device_ConfigureEndpoints+0x48>
     fde:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	08 95       	ret

00000fe6 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fe6:	cf 93       	push	r28
     fe8:	df 93       	push	r29
     fea:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     fec:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
     ff0:	83 ff       	sbrs	r24, 3
     ff2:	a2 c0       	rjmp	.+324    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
     ff4:	88 81       	ld	r24, Y
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	20 91 4c 02 	lds	r18, 0x024C
     ffc:	30 91 4d 02 	lds	r19, 0x024D
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	09 f0       	breq	.+2      	; 0x1008 <CDC_Device_ProcessControlRequest+0x22>
    1006:	98 c0       	rjmp	.+304    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
    1008:	80 91 49 02 	lds	r24, 0x0249
    100c:	81 32       	cpi	r24, 0x21	; 33
    100e:	69 f0       	breq	.+26     	; 0x102a <CDC_Device_ProcessControlRequest+0x44>
    1010:	82 32       	cpi	r24, 0x22	; 34
    1012:	20 f4       	brcc	.+8      	; 0x101c <CDC_Device_ProcessControlRequest+0x36>
    1014:	80 32       	cpi	r24, 0x20	; 32
    1016:	09 f0       	breq	.+2      	; 0x101a <CDC_Device_ProcessControlRequest+0x34>
    1018:	8f c0       	rjmp	.+286    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
    101a:	3c c0       	rjmp	.+120    	; 0x1094 <CDC_Device_ProcessControlRequest+0xae>
    101c:	82 32       	cpi	r24, 0x22	; 34
    101e:	09 f4       	brne	.+2      	; 0x1022 <CDC_Device_ProcessControlRequest+0x3c>
    1020:	6a c0       	rjmp	.+212    	; 0x10f6 <CDC_Device_ProcessControlRequest+0x110>
    1022:	83 32       	cpi	r24, 0x23	; 35
    1024:	09 f0       	breq	.+2      	; 0x1028 <CDC_Device_ProcessControlRequest+0x42>
    1026:	88 c0       	rjmp	.+272    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
    1028:	79 c0       	rjmp	.+242    	; 0x111c <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    102a:	80 91 48 02 	lds	r24, 0x0248
    102e:	81 3a       	cpi	r24, 0xA1	; 161
    1030:	09 f0       	breq	.+2      	; 0x1034 <CDC_Device_ProcessControlRequest+0x4e>
    1032:	82 c0       	rjmp	.+260    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1034:	80 91 e8 00 	lds	r24, 0x00E8
    1038:	87 7f       	andi	r24, 0xF7	; 247
    103a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    103e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1042:	80 ff       	sbrs	r24, 0
    1044:	fc cf       	rjmp	.-8      	; 0x103e <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1046:	8c 89       	ldd	r24, Y+20	; 0x14
    1048:	9d 89       	ldd	r25, Y+21	; 0x15
    104a:	ae 89       	ldd	r26, Y+22	; 0x16
    104c:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    104e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1052:	29 2f       	mov	r18, r25
    1054:	3a 2f       	mov	r19, r26
    1056:	4b 2f       	mov	r20, r27
    1058:	55 27       	eor	r21, r21
    105a:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    105e:	9d 01       	movw	r18, r26
    1060:	44 27       	eor	r20, r20
    1062:	55 27       	eor	r21, r21
    1064:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    1068:	8b 2f       	mov	r24, r27
    106a:	99 27       	eor	r25, r25
    106c:	aa 27       	eor	r26, r26
    106e:	bb 27       	eor	r27, r27
    1070:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1074:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1076:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    107a:	89 8d       	ldd	r24, Y+25	; 0x19
    107c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1080:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1082:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1086:	80 91 e8 00 	lds	r24, 0x00E8
    108a:	8e 77       	andi	r24, 0x7E	; 126
    108c:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1090:	b0 db       	rcall	.-2208   	; 0x7f2 <Endpoint_ClearStatusStage>
    1092:	52 c0       	rjmp	.+164    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1094:	80 91 48 02 	lds	r24, 0x0248
    1098:	81 32       	cpi	r24, 0x21	; 33
    109a:	09 f0       	breq	.+2      	; 0x109e <CDC_Device_ProcessControlRequest+0xb8>
    109c:	4d c0       	rjmp	.+154    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    109e:	80 91 e8 00 	lds	r24, 0x00E8
    10a2:	87 7f       	andi	r24, 0xF7	; 247
    10a4:	80 93 e8 00 	sts	0x00E8, r24
    10a8:	04 c0       	rjmp	.+8      	; 0x10b2 <CDC_Device_ProcessControlRequest+0xcc>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    10aa:	8e b3       	in	r24, 0x1e	; 30
    10ac:	88 23       	and	r24, r24
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <CDC_Device_ProcessControlRequest+0xcc>
    10b0:	43 c0       	rjmp	.+134    	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10b2:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    10b6:	82 ff       	sbrs	r24, 2
    10b8:	f8 cf       	rjmp	.-16     	; 0x10aa <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    10ba:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    10be:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    10c2:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    10c6:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    10ca:	8c 8b       	std	Y+20, r24	; 0x14
    10cc:	9d 8b       	std	Y+21, r25	; 0x15
    10ce:	2e 8b       	std	Y+22, r18	; 0x16
    10d0:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    10d2:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    10d6:	88 8f       	std	Y+24, r24	; 0x18
    10d8:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    10dc:	89 8f       	std	Y+25, r24	; 0x19
    10de:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    10e2:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10e4:	80 91 e8 00 	lds	r24, 0x00E8
    10e8:	8b 77       	andi	r24, 0x7B	; 123
    10ea:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    10ee:	81 db       	rcall	.-2302   	; 0x7f2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    10f0:	ce 01       	movw	r24, r28
    10f2:	c2 d8       	rcall	.-3708   	; 0x278 <EVENT_CDC_Device_LineEncodingChanged>
    10f4:	21 c0       	rjmp	.+66     	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10f6:	80 91 48 02 	lds	r24, 0x0248
    10fa:	81 32       	cpi	r24, 0x21	; 33
    10fc:	e9 f4       	brne	.+58     	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10fe:	80 91 e8 00 	lds	r24, 0x00E8
    1102:	87 7f       	andi	r24, 0xF7	; 247
    1104:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1108:	74 db       	rcall	.-2328   	; 0x7f2 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    110a:	80 91 4a 02 	lds	r24, 0x024A
    110e:	90 91 4b 02 	lds	r25, 0x024B
    1112:	99 8b       	std	Y+17, r25	; 0x11
    1114:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1116:	ce 01       	movw	r24, r28
    1118:	cf de       	rcall	.-610    	; 0xeb8 <CDC_Device_Event_Stub>
    111a:	0e c0       	rjmp	.+28     	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    111c:	80 91 48 02 	lds	r24, 0x0248
    1120:	81 32       	cpi	r24, 0x21	; 33
    1122:	51 f4       	brne	.+20     	; 0x1138 <CDC_Device_ProcessControlRequest+0x152>
    1124:	80 91 e8 00 	lds	r24, 0x00E8
    1128:	87 7f       	andi	r24, 0xF7	; 247
    112a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    112e:	61 db       	rcall	.-2366   	; 0x7f2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1130:	ce 01       	movw	r24, r28
    1132:	60 91 4a 02 	lds	r22, 0x024A
    1136:	c0 de       	rcall	.-640    	; 0xeb8 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <__udivmodsi4>:
    113e:	a1 e2       	ldi	r26, 0x21	; 33
    1140:	1a 2e       	mov	r1, r26
    1142:	aa 1b       	sub	r26, r26
    1144:	bb 1b       	sub	r27, r27
    1146:	fd 01       	movw	r30, r26
    1148:	0d c0       	rjmp	.+26     	; 0x1164 <__udivmodsi4_ep>

0000114a <__udivmodsi4_loop>:
    114a:	aa 1f       	adc	r26, r26
    114c:	bb 1f       	adc	r27, r27
    114e:	ee 1f       	adc	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	a2 17       	cp	r26, r18
    1154:	b3 07       	cpc	r27, r19
    1156:	e4 07       	cpc	r30, r20
    1158:	f5 07       	cpc	r31, r21
    115a:	20 f0       	brcs	.+8      	; 0x1164 <__udivmodsi4_ep>
    115c:	a2 1b       	sub	r26, r18
    115e:	b3 0b       	sbc	r27, r19
    1160:	e4 0b       	sbc	r30, r20
    1162:	f5 0b       	sbc	r31, r21

00001164 <__udivmodsi4_ep>:
    1164:	66 1f       	adc	r22, r22
    1166:	77 1f       	adc	r23, r23
    1168:	88 1f       	adc	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	1a 94       	dec	r1
    116e:	69 f7       	brne	.-38     	; 0x114a <__udivmodsi4_loop>
    1170:	60 95       	com	r22
    1172:	70 95       	com	r23
    1174:	80 95       	com	r24
    1176:	90 95       	com	r25
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	bd 01       	movw	r22, r26
    117e:	cf 01       	movw	r24, r30
    1180:	08 95       	ret

00001182 <_exit>:
    1182:	f8 94       	cli

00001184 <__stop_program>:
    1184:	ff cf       	rjmp	.-2      	; 0x1184 <__stop_program>


USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  000011de  00001272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800176  00800176  000012e8  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000012e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016f  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001eef  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005f8  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009e57  00000000  00000000  000024f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000282f  00000000  00000000  0000c34f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000c90f  00000000  00000000  0000eb7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000f40  00000000  00000000  0001b490  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00018071  00000000  00000000  0001c3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006363  00000000  00000000  00034441  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000768  00000000  00000000  0003a7a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000143ac  00000000  00000000  0003af0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
       2:	00 00       	nop
       4:	bf c0       	rjmp	.+382    	; 0x184 <__bad_interrupt>
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
       6:	00 00       	nop
       8:	bd c0       	rjmp	.+378    	; 0x184 <__bad_interrupt>
       a:	00 00       	nop
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
       c:	bb c0       	rjmp	.+374    	; 0x184 <__bad_interrupt>
       e:	00 00       	nop
      10:	b9 c0       	rjmp	.+370    	; 0x184 <__bad_interrupt>
      12:	00 00       	nop
      14:	b7 c0       	rjmp	.+366    	; 0x184 <__bad_interrupt>
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
      16:	00 00       	nop
      18:	b5 c0       	rjmp	.+362    	; 0x184 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b3 c0       	rjmp	.+358    	; 0x184 <__bad_interrupt>
      1e:	00 00       	nop
	while (UDCON & (1 << RMWKUP));
      20:	b1 c0       	rjmp	.+354    	; 0x184 <__bad_interrupt>
      22:	00 00       	nop
      24:	af c0       	rjmp	.+350    	; 0x184 <__bad_interrupt>
      26:	00 00       	nop
}
      28:	f5 c3       	rjmp	.+2026   	; 0x814 <__vector_10>
		uint8_t* PrevDescLoc  = *CurrConfigLoc;
		uint16_t PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
      2a:	00 00       	nop
      2c:	b4 c4       	rjmp	.+2408   	; 0x996 <__vector_11>
      2e:	00 00       	nop
      30:	a9 c0       	rjmp	.+338    	; 0x184 <__bad_interrupt>
      32:	00 00       	nop
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
      34:	a7 c0       	rjmp	.+334    	; 0x184 <__bad_interrupt>
      36:	00 00       	nop
			{
				*CurrConfigLoc = PrevDescLoc;
      38:	a5 c0       	rjmp	.+330    	; 0x184 <__bad_interrupt>
      3a:	00 00       	nop
				*BytesRem      = PrevBytesRem;
      3c:	a3 c0       	rjmp	.+326    	; 0x184 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a1 c0       	rjmp	.+322    	; 0x184 <__bad_interrupt>
      42:	00 00       	nop
                                  void** const CurrConfigLoc,
                                  ConfigComparatorPtr_t const ComparatorRoutine)
{
	uint8_t ErrorCode;

	while (*BytesRem)
      44:	9f c0       	rjmp	.+318    	; 0x184 <__bad_interrupt>
      46:	00 00       	nop
      48:	9d c0       	rjmp	.+314    	; 0x184 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9b c0       	rjmp	.+310    	; 0x184 <__bad_interrupt>
      4e:	00 00       	nop

			return ErrorCode;
		}
	}

	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
      50:	99 c0       	rjmp	.+306    	; 0x184 <__bad_interrupt>
}
      52:	00 00       	nop
      54:	97 c0       	rjmp	.+302    	; 0x184 <__bad_interrupt>
      56:	00 00       	nop
      58:	95 c0       	rjmp	.+298    	; 0x184 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	93 c0       	rjmp	.+294    	; 0x184 <__bad_interrupt>
      5e:	00 00       	nop
      60:	91 c0       	rjmp	.+290    	; 0x184 <__bad_interrupt>
      62:	00 00       	nop
      64:	ed c0       	rjmp	.+474    	; 0x240 <__vector_25>
      66:	00 00       	nop
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};

	memset(ParserData,       0x00, sizeof(HID_ReportInfo_t));
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
      68:	8d c0       	rjmp	.+282    	; 0x184 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8b c0       	rjmp	.+278    	; 0x184 <__bad_interrupt>
      6e:	00 00       	nop
      70:	89 c0       	rjmp	.+274    	; 0x184 <__bad_interrupt>

	ParserData->TotalDeviceReports = 1;
      72:	00 00       	nop
      74:	87 c0       	rjmp	.+270    	; 0x184 <__bad_interrupt>
      76:	00 00       	nop
      78:	85 c0       	rjmp	.+266    	; 0x184 <__bad_interrupt>
      7a:	00 00       	nop
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
	HID_MinMax_t          UsageMinMax             = {0, 0};
      7c:	83 c0       	rjmp	.+262    	; 0x184 <__bad_interrupt>
      7e:	00 00       	nop
      80:	81 c0       	rjmp	.+258    	; 0x184 <__bad_interrupt>
      82:	00 00       	nop
      84:	7f c0       	rjmp	.+254    	; 0x184 <__bad_interrupt>
      86:	00 00       	nop
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
	HID_ReportSizeInfo_t* CurrReportIDInfo        = &ParserData->ReportIDSizes[0];
	uint16_t              UsageList[HID_USAGE_STACK_DEPTH];
	uint8_t               UsageListSize           = 0;
      88:	7d c0       	rjmp	.+250    	; 0x184 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7b c0       	rjmp	.+246    	; 0x184 <__bad_interrupt>
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
	HID_CollectionPath_t* CurrCollectionPath      = NULL;
      8e:	00 00       	nop
      90:	79 c0       	rjmp	.+242    	; 0x184 <__bad_interrupt>
uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
                             uint16_t ReportSize,
                             HID_ReportInfo_t* const ParserData)
{
	HID_StateTable_t      StateTable[HID_STATETABLE_STACK_DEPTH];
	HID_StateTable_t*     CurrStateTable          = &StateTable[0];
      92:	00 00       	nop

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
      94:	77 c0       	rjmp	.+238    	; 0x184 <__bad_interrupt>
      96:	00 00       	nop
      98:	75 c0       	rjmp	.+234    	; 0x184 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	73 c0       	rjmp	.+230    	; 0x184 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	71 c0       	rjmp	.+226    	; 0x184 <__bad_interrupt>
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
      a2:	00 00       	nop
      a4:	6f c0       	rjmp	.+222    	; 0x184 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6d c0       	rjmp	.+218    	; 0x184 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
      bc:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
      cc:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

000000dc <ManufacturerString>:
		uint32_t ReportItemData = 0;

		ReportData++;
		ReportSize--;
      dc:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
      ec:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000f6 <LanguageString>:
      f6:	04 03 09 04                                         ....

000000fa <ConfigurationDescriptor>:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
				ReportSize     -= 2;
				ReportData     += 2;
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
      fa:	09 02 3e 00 02 01 00 c0 fa 09 04 00 00 01 02 02     ..>.............
	while (ReportSize)
	{
		uint8_t  HIDReportItem  = *ReportData;
		uint32_t ReportItemData = 0;

		ReportData++;
     10a:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     11a:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     12a:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000138 <DeviceDescriptor>:
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
     138:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
		ReportSize--;

		switch (HIDReportItem & HID_RI_DATA_SIZE_MASK)
		{
			case HID_RI_DATA_BITS_32:
				ReportItemData  = (((uint32_t)ReportData[3] << 24) | ((uint32_t)ReportData[2] << 16) |
     148:	dc 01                                               ..

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
			                       ((uint16_t)ReportData[1] << 8)  | ReportData[0]);
				ReportSize     -= 4;
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	ee ed       	ldi	r30, 0xDE	; 222
     15e:	f1 e1       	ldi	r31, 0x11	; 17
     160:	03 c0       	rjmp	.+6      	; 0x168 <.do_copy_data_start>

00000162 <.do_copy_data_loop>:
     162:	c8 95       	lpm
     164:	31 96       	adiw	r30, 0x01	; 1
     166:	0d 92       	st	X+, r0

00000168 <.do_copy_data_start>:
     168:	a6 37       	cpi	r26, 0x76	; 118
     16a:	b1 07       	cpc	r27, r17
				ReportData     += 4;
     16c:	d1 f7       	brne	.-12     	; 0x162 <.do_copy_data_loop>

0000016e <__do_clear_bss>:
     16e:	12 e0       	ldi	r17, 0x02	; 2
     170:	a6 e7       	ldi	r26, 0x76	; 118
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	01 c0       	rjmp	.+2      	; 0x178 <.do_clear_bss_start>

00000176 <.do_clear_bss_loop>:
     176:	1d 92       	st	X+, r1

00000178 <.do_clear_bss_start>:
				break;
			case HID_RI_DATA_BITS_16:
				ReportItemData  = (((uint16_t)ReportData[1] << 8) | (ReportData[0]));
     178:	aa 39       	cpi	r26, 0x9A	; 154
     17a:	b1 07       	cpc	r27, r17
     17c:	e1 f7       	brne	.-8      	; 0x176 <.do_clear_bss_loop>
     17e:	69 d1       	rcall	.+722    	; 0x452 <main>
     180:	0c 94 ed 08 	jmp	0x11da	; 0x11da <_exit>

00000184 <__bad_interrupt>:
     184:	3d cf       	rjmp	.-390    	; 0x0 <__vectors>

00000186 <RingBuffer_Insert>:
     186:	fc 01       	movw	r30, r24
     188:	a0 81       	ld	r26, Z
     18a:	b1 81       	ldd	r27, Z+1	; 0x01
     18c:	6c 93       	st	X, r22
     18e:	80 81       	ld	r24, Z
     190:	91 81       	ldd	r25, Z+1	; 0x01
     192:	01 96       	adiw	r24, 0x01	; 1
     194:	91 83       	std	Z+1, r25	; 0x01
     196:	80 83       	st	Z, r24
     198:	26 81       	ldd	r18, Z+6	; 0x06
     19a:	37 81       	ldd	r19, Z+7	; 0x07
     19c:	82 17       	cp	r24, r18
     19e:	93 07       	cpc	r25, r19
     1a0:	21 f4       	brne	.+8      	; 0x1aa <RingBuffer_Insert+0x24>
     1a2:	84 81       	ldd	r24, Z+4	; 0x04
     1a4:	95 81       	ldd	r25, Z+5	; 0x05
     1a6:	91 83       	std	Z+1, r25	; 0x01
     1a8:	80 83       	st	Z, r24
				ReportSize     -= 2;
     1aa:	2f b7       	in	r18, 0x3f	; 63
     1ac:	f8 94       	cli
     1ae:	82 85       	ldd	r24, Z+10	; 0x0a
     1b0:	93 85       	ldd	r25, Z+11	; 0x0b
     1b2:	01 96       	adiw	r24, 0x01	; 1
     1b4:	93 87       	std	Z+11, r25	; 0x0b
     1b6:	82 87       	std	Z+10, r24	; 0x0a
     1b8:	2f bf       	out	0x3f, r18	; 63
     1ba:	08 95       	ret

000001bc <RingBuffer_Remove>:
				ReportData     += 2;
     1bc:	fc 01       	movw	r30, r24
     1be:	a2 81       	ldd	r26, Z+2	; 0x02
				break;
			case HID_RI_DATA_BITS_8:
				ReportItemData  = ReportData[0];
     1c0:	b3 81       	ldd	r27, Z+3	; 0x03
     1c2:	8d 91       	ld	r24, X+
     1c4:	b3 83       	std	Z+3, r27	; 0x03
     1c6:	a2 83       	std	Z+2, r26	; 0x02
     1c8:	26 81       	ldd	r18, Z+6	; 0x06
     1ca:	37 81       	ldd	r19, Z+7	; 0x07
				ReportSize     -= 1;
     1cc:	a2 17       	cp	r26, r18
     1ce:	b3 07       	cpc	r27, r19
     1d0:	21 f4       	brne	.+8      	; 0x1da <RingBuffer_Remove+0x1e>
     1d2:	24 81       	ldd	r18, Z+4	; 0x04
     1d4:	35 81       	ldd	r19, Z+5	; 0x05
     1d6:	33 83       	std	Z+3, r19	; 0x03
     1d8:	22 83       	std	Z+2, r18	; 0x02
     1da:	9f b7       	in	r25, 0x3f	; 63
     1dc:	f8 94       	cli
				ReportData     += 1;
     1de:	22 85       	ldd	r18, Z+10	; 0x0a
     1e0:	33 85       	ldd	r19, Z+11	; 0x0b
     1e2:	21 50       	subi	r18, 0x01	; 1
     1e4:	31 09       	sbc	r19, r1
     1e6:	33 87       	std	Z+11, r19	; 0x0b
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     1e8:	22 87       	std	Z+10, r18	; 0x0a
     1ea:	9f bf       	out	0x3f, r25	; 63
     1ec:	08 95       	ret

000001ee <LEDs_SetAllLEDs>:
     1ee:	80 ff       	sbrs	r24, 0
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <LEDs_SetAllLEDs+0x8>
     1f2:	29 9a       	sbi	0x05, 1	; 5
     1f4:	01 c0       	rjmp	.+2      	; 0x1f8 <LEDs_SetAllLEDs+0xa>
     1f6:	29 98       	cbi	0x05, 1	; 5
     1f8:	81 ff       	sbrs	r24, 1
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <LEDs_SetAllLEDs+0x12>
     1fc:	2a 9a       	sbi	0x05, 2	; 5
     1fe:	08 95       	ret
     200:	2a 98       	cbi	0x05, 2	; 5
     202:	08 95       	ret

00000204 <LEDs_Init>:
     204:	86 e0       	ldi	r24, 0x06	; 6
     206:	84 b9       	out	0x04, r24	; 4
     208:	85 b1       	in	r24, 0x05	; 5
     20a:	8a 7f       	andi	r24, 0xFA	; 250
     20c:	85 b9       	out	0x05, r24	; 5
     20e:	08 95       	ret

00000210 <outStringToGPS>:
     210:	fc 01       	movw	r30, r24
     212:	06 c0       	rjmp	.+12     	; 0x220 <outStringToGPS+0x10>
     214:	90 91 c8 00 	lds	r25, 0x00C8
     218:	95 ff       	sbrs	r25, 5
     21a:	fc cf       	rjmp	.-8      	; 0x214 <outStringToGPS+0x4>
     21c:	80 93 ce 00 	sts	0x00CE, r24
     220:	81 91       	ld	r24, Z+
     222:	81 11       	cpse	r24, r1
     224:	f7 cf       	rjmp	.-18     	; 0x214 <outStringToGPS+0x4>
     226:	80 91 c8 00 	lds	r24, 0x00C8
     22a:	86 70       	andi	r24, 0x06	; 6
     22c:	e1 f3       	breq	.-8      	; 0x226 <outStringToGPS+0x16>
     22e:	08 95       	ret

00000230 <EVENT_USB_Device_Connect>:
     230:	08 95       	ret

00000232 <EVENT_USB_Device_Disconnect>:
     232:	08 95       	ret

00000234 <EVENT_USB_Device_ConfigurationChanged>:
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	91 e0       	ldi	r25, 0x01	; 1
     238:	2e c6       	rjmp	.+3164   	; 0xe96 <CDC_Device_ConfigureEndpoints>

0000023a <EVENT_USB_Device_ControlRequest>:
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	91 e0       	ldi	r25, 0x01	; 1
     23e:	ea c6       	rjmp	.+3540   	; 0x1014 <CDC_Device_ProcessControlRequest>

00000240 <__vector_25>:
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	ef 93       	push	r30
     260:	ff 93       	push	r31
     262:	60 91 ce 00 	lds	r22, 0x00CE
     266:	8e b3       	in	r24, 0x1e	; 30
     268:	84 30       	cpi	r24, 0x04	; 4
     26a:	19 f4       	brne	.+6      	; 0x272 <__vector_25+0x32>
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	92 e0       	ldi	r25, 0x02	; 2
     270:	8a df       	rcall	.-236    	; 0x186 <RingBuffer_Insert>
     272:	ff 91       	pop	r31
     274:	ef 91       	pop	r30
     276:	bf 91       	pop	r27
     278:	af 91       	pop	r26
     27a:	9f 91       	pop	r25
     27c:	8f 91       	pop	r24
     27e:	7f 91       	pop	r23
     280:	6f 91       	pop	r22
     282:	5f 91       	pop	r21
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
     284:	4f 91       	pop	r20
     286:	3f 91       	pop	r19
     288:	2f 91       	pop	r18
     28a:	0f 90       	pop	r0
     28c:	0f be       	out	0x3f, r0	; 63
     28e:	0f 90       	pop	r0
				  return HID_PARSE_HIDStackOverflow;

				memcpy((CurrStateTable + 1),
     290:	1f 90       	pop	r1
     292:	18 95       	reti

00000294 <EVENT_CDC_Device_LineEncodingChanged>:
     294:	cf 93       	push	r28
     296:	fc 01       	movw	r30, r24
     298:	a1 8d       	ldd	r26, Z+25	; 0x19
     29a:	a1 50       	subi	r26, 0x01	; 1
     29c:	a2 30       	cpi	r26, 0x02	; 2
     29e:	28 f4       	brcc	.+10     	; 0x2aa <EVENT_CDC_Device_LineEncodingChanged+0x16>
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
				       CurrStateTable,
				       sizeof(HID_ReportItem_t));

				CurrStateTable++;
     2a2:	a5 5e       	subi	r26, 0xE5	; 229
				break;
     2a4:	be 4f       	sbci	r27, 0xFE	; 254
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
     2a6:	cc 91       	ld	r28, X
     2a8:	01 c0       	rjmp	.+2      	; 0x2ac <EVENT_CDC_Device_LineEncodingChanged+0x18>
     2aa:	c0 e0       	ldi	r28, 0x00	; 0
     2ac:	80 8d       	ldd	r24, Z+24	; 0x18
     2ae:	82 30       	cpi	r24, 0x02	; 2
     2b0:	09 f4       	brne	.+2      	; 0x2b4 <EVENT_CDC_Device_LineEncodingChanged+0x20>
				  return HID_PARSE_HIDStackUnderflow;

				CurrStateTable--;
     2b2:	c8 60       	ori	r28, 0x08	; 8
     2b4:	82 8d       	ldd	r24, Z+26	; 0x1a
     2b6:	87 30       	cpi	r24, 0x07	; 7
				break;
     2b8:	31 f0       	breq	.+12     	; 0x2c6 <EVENT_CDC_Device_LineEncodingChanged+0x32>
			case HID_RI_USAGE_PAGE(0):
				if ((HIDReportItem & HID_RI_DATA_SIZE_MASK) == HID_RI_DATA_BITS_32)
				  CurrStateTable->Attributes.Usage.Page = (ReportItemData >> 16);

				CurrStateTable->Attributes.Usage.Page       = ReportItemData;
     2ba:	88 30       	cpi	r24, 0x08	; 8
     2bc:	31 f0       	breq	.+12     	; 0x2ca <EVENT_CDC_Device_LineEncodingChanged+0x36>
     2be:	86 30       	cpi	r24, 0x06	; 6
     2c0:	29 f4       	brne	.+10     	; 0x2cc <EVENT_CDC_Device_LineEncodingChanged+0x38>
     2c2:	c2 60       	ori	r28, 0x02	; 2
				break;
     2c4:	03 c0       	rjmp	.+6      	; 0x2cc <EVENT_CDC_Device_LineEncodingChanged+0x38>
			case HID_RI_LOGICAL_MINIMUM(0):
				CurrStateTable->Attributes.Logical.Minimum  = ReportItemData;
     2c6:	c4 60       	ori	r28, 0x04	; 4
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <EVENT_CDC_Device_LineEncodingChanged+0x38>
     2ca:	c6 60       	ori	r28, 0x06	; 6
     2cc:	10 92 c9 00 	sts	0x00C9, r1
				break;
     2d0:	10 92 c8 00 	sts	0x00C8, r1
			case HID_RI_LOGICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Logical.Maximum  = ReportItemData;
     2d4:	10 92 ca 00 	sts	0x00CA, r1
     2d8:	24 89       	ldd	r18, Z+20	; 0x14
     2da:	35 89       	ldd	r19, Z+21	; 0x15
     2dc:	46 89       	ldd	r20, Z+22	; 0x16
     2de:	57 89       	ldd	r21, Z+23	; 0x17
				break;
     2e0:	ca 01       	movw	r24, r20
			case HID_RI_PHYSICAL_MINIMUM(0):
				CurrStateTable->Attributes.Physical.Minimum = ReportItemData;
     2e2:	b9 01       	movw	r22, r18
     2e4:	96 95       	lsr	r25
     2e6:	87 95       	ror	r24
     2e8:	77 95       	ror	r23
     2ea:	67 95       	ror	r22
				break;
     2ec:	60 5c       	subi	r22, 0xC0	; 192
			case HID_RI_PHYSICAL_MAXIMUM(0):
				CurrStateTable->Attributes.Physical.Maximum = ReportItemData;
     2ee:	7d 4b       	sbci	r23, 0xBD	; 189
     2f0:	80 4f       	sbci	r24, 0xF0	; 240
     2f2:	9f 4f       	sbci	r25, 0xFF	; 255
     2f4:	4b d7       	rcall	.+3734   	; 0x118c <__udivmodsi4>
     2f6:	21 50       	subi	r18, 0x01	; 1
     2f8:	31 09       	sbc	r19, r1
     2fa:	30 93 cd 00 	sts	0x00CD, r19
				break;
			case HID_RI_UNIT_EXPONENT(0):
				CurrStateTable->Attributes.Unit.Exponent    = ReportItemData;
     2fe:	20 93 cc 00 	sts	0x00CC, r18
				break;
     302:	c0 93 ca 00 	sts	0x00CA, r28
			case HID_RI_UNIT(0):
				CurrStateTable->Attributes.Unit.Type        = ReportItemData;
     306:	82 e0       	ldi	r24, 0x02	; 2
     308:	80 93 c8 00 	sts	0x00C8, r24
     30c:	88 e9       	ldi	r24, 0x98	; 152
     30e:	80 93 c9 00 	sts	0x00C9, r24
				break;
     312:	cf 91       	pop	r28
			case HID_RI_REPORT_SIZE(0):
				CurrStateTable->Attributes.BitSize          = ReportItemData;
     314:	08 95       	ret

00000316 <setBaudRate9600>:
     316:	cf 93       	push	r28
				break;
     318:	df 93       	push	r29
			case HID_RI_REPORT_COUNT(0):
				CurrStateTable->ReportCount                 = ReportItemData;
     31a:	e9 ec       	ldi	r30, 0xC9	; 201
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	10 82       	st	Z, r1
				break;
     320:	a8 ec       	ldi	r26, 0xC8	; 200
			case HID_RI_REPORT_ID(0):
				CurrStateTable->ReportID                    = ReportItemData;
     322:	b0 e0       	ldi	r27, 0x00	; 0
     324:	1c 92       	st	X, r1
     326:	ca ec       	ldi	r28, 0xCA	; 202

				if (ParserData->UsingReportIDs)
     328:	d0 e0       	ldi	r29, 0x00	; 0
     32a:	18 82       	st	Y, r1
     32c:	87 e6       	ldi	r24, 0x67	; 103
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	90 93 cd 00 	sts	0x00CD, r25
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     334:	80 93 cc 00 	sts	0x00CC, r24
     338:	86 e0       	ldi	r24, 0x06	; 6
     33a:	88 83       	st	Y, r24
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	8c 93       	st	X, r24
     340:	88 e0       	ldi	r24, 0x08	; 8
     342:	80 83       	st	Z, r24
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     344:	df 91       	pop	r29

#define  __INCLUDE_FROM_USB_DRIVER
#define  __INCLUDE_FROM_HID_DRIVER
#include "HIDParser.h"

uint8_t USB_ProcessHIDReport(const uint8_t* ReportData,
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <SetupHardware>:
     34a:	cf 93       	push	r28
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
					{
						if (ParserData->ReportIDSizes[i].ReportID == CurrStateTable->ReportID)
     34c:	df 93       	push	r29
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	c8 55       	subi	r28, 0x58	; 88
     354:	d1 09       	sbc	r29, r1
     356:	0f b6       	in	r0, 0x3f	; 63
						{
							CurrReportIDInfo = &ParserData->ReportIDSizes[i];
     358:	f8 94       	cli
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	0f be       	out	0x3f, r0	; 63
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	84 e3       	ldi	r24, 0x34	; 52
     362:	ed e1       	ldi	r30, 0x1D	; 29
     364:	f1 e0       	ldi	r31, 0x01	; 1
     366:	de 01       	movw	r26, r28
     368:	11 96       	adiw	r26, 0x01	; 1
     36a:	01 90       	ld	r0, Z+
     36c:	0d 92       	st	X+, r0
     36e:	8a 95       	dec	r24

				if (ParserData->UsingReportIDs)
				{
					CurrReportIDInfo = NULL;

					for (uint8_t i = 0; i < ParserData->TotalDeviceReports; i++)
     370:	e1 f7       	brne	.-8      	; 0x36a <SetupHardware+0x20>
     372:	80 e1       	ldi	r24, 0x10	; 16
     374:	e1 e5       	ldi	r30, 0x51	; 81
					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;

						CurrReportIDInfo = &ParserData->ReportIDSizes[ParserData->TotalDeviceReports++];
     376:	f1 e0       	ldi	r31, 0x01	; 1
     378:	de 01       	movw	r26, r28
     37a:	a7 5b       	subi	r26, 0xB7	; 183
     37c:	bf 4f       	sbci	r27, 0xFF	; 255
     37e:	01 90       	ld	r0, Z+
     380:	0d 92       	st	X+, r0
     382:	8a 95       	dec	r24
     384:	e1 f7       	brne	.-8      	; 0x37e <SetupHardware+0x34>
     386:	84 e1       	ldi	r24, 0x14	; 20
     388:	e1 e6       	ldi	r30, 0x61	; 97
     38a:	f1 e0       	ldi	r31, 0x01	; 1
     38c:	de 01       	movw	r26, r28
     38e:	d5 96       	adiw	r26, 0x35	; 53
						memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));
     390:	01 90       	ld	r0, Z+
     392:	0d 92       	st	X+, r0
     394:	8a 95       	dec	r24
     396:	e1 f7       	brne	.-8      	; 0x390 <SetupHardware+0x46>
					}
				}

				ParserData->UsingReportIDs = true;
     398:	84 b7       	in	r24, 0x34	; 52
     39a:	87 7f       	andi	r24, 0xF7	; 247
     39c:	84 bf       	out	0x34, r24	; 52
     39e:	88 e1       	ldi	r24, 0x18	; 24
     3a0:	0f b6       	in	r0, 0x3f	; 63

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
     3a2:	f8 94       	cli
     3a4:	80 93 60 00 	sts	0x0060, r24
     3a8:	10 92 60 00 	sts	0x0060, r1
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	80 e8       	ldi	r24, 0x80	; 128
     3b2:	0f b6       	in	r0, 0x3f	; 63
     3b4:	f8 94       	cli
     3b6:	80 93 61 00 	sts	0x0061, r24
				  return HID_PARSE_UsageListOverflow;

				UsageList[UsageListSize++] = ReportItemData;
     3ba:	90 93 61 00 	sts	0x0061, r25
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	21 df       	rcall	.-446    	; 0x204 <LEDs_Init>
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	13 df       	rcall	.-474    	; 0x1ee <LEDs_SetAllLEDs>
     3c8:	2f ef       	ldi	r18, 0xFF	; 255
     3ca:	80 e7       	ldi	r24, 0x70	; 112
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	80 40       	sbci	r24, 0x00	; 0
     3d2:	90 40       	sbci	r25, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <SetupHardware+0x84>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <SetupHardware+0x8e>
				break;
     3d8:	00 00       	nop
			case HID_RI_USAGE_MINIMUM(0):
				UsageMinMax.Minimum = ReportItemData;
				break;
			case HID_RI_USAGE_MAXIMUM(0):
				UsageMinMax.Maximum = ReportItemData;
				break;
     3da:	9d df       	rcall	.-198    	; 0x316 <setBaudRate9600>
     3dc:	2f ef       	ldi	r18, 0xFF	; 255
     3de:	80 e7       	ldi	r24, 0x70	; 112
			case HID_RI_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	21 50       	subi	r18, 0x01	; 1
     3e4:	80 40       	sbci	r24, 0x00	; 0
				{
					CurrCollectionPath = &ParserData->CollectionPaths[0];
     3e6:	90 40       	sbci	r25, 0x00	; 0
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <SetupHardware+0x98>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <SetupHardware+0xa2>
     3ec:	00 00       	nop
				}
				else
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];
     3ee:	ce 01       	movw	r24, r28
     3f0:	01 96       	adiw	r24, 0x01	; 1
     3f2:	0e df       	rcall	.-484    	; 0x210 <outStringToGPS>
     3f4:	2f ef       	ldi	r18, 0xFF	; 255
     3f6:	80 e7       	ldi	r24, 0x70	; 112
     3f8:	92 e0       	ldi	r25, 0x02	; 2

					while (CurrCollectionPath->Parent != NULL)
     3fa:	21 50       	subi	r18, 0x01	; 1
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
     3fc:	80 40       	sbci	r24, 0x00	; 0
     3fe:	90 40       	sbci	r25, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <SetupHardware+0xb0>
     402:	00 c0       	rjmp	.+0      	; 0x404 <SetupHardware+0xba>
     404:	00 00       	nop
     406:	ce 01       	movw	r24, r28
     408:	c5 96       	adiw	r24, 0x35	; 53
     40a:	02 df       	rcall	.-508    	; 0x210 <outStringToGPS>
     40c:	2f ef       	ldi	r18, 0xFF	; 255
     40e:	80 e7       	ldi	r24, 0x70	; 112
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
     410:	92 e0       	ldi	r25, 0x02	; 2
				{
					HID_CollectionPath_t* ParentCollectionPath = CurrCollectionPath;

					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
     412:	21 50       	subi	r18, 0x01	; 1
     414:	80 40       	sbci	r24, 0x00	; 0
     416:	90 40       	sbci	r25, 0x00	; 0
     418:	e1 f7       	brne	.-8      	; 0x412 <SetupHardware+0xc8>
						  return HID_PARSE_InsufficientCollectionPaths;

						CurrCollectionPath++;
					}

					CurrCollectionPath->Parent = ParentCollectionPath;
     41a:	00 c0       	rjmp	.+0      	; 0x41c <SetupHardware+0xd2>
     41c:	00 00       	nop
     41e:	ce 01       	movw	r24, r28
				}

				CurrCollectionPath->Type       = ReportItemData;
     420:	87 5b       	subi	r24, 0xB7	; 183
     422:	9f 4f       	sbci	r25, 0xFF	; 255
				CurrCollectionPath->Usage.Page = CurrStateTable->Attributes.Usage.Page;
     424:	f5 de       	rcall	.-534    	; 0x210 <outStringToGPS>
     426:	2f ef       	ldi	r18, 0xFF	; 255
     428:	80 e7       	ldi	r24, 0x70	; 112
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	21 50       	subi	r18, 0x01	; 1
     42e:	80 40       	sbci	r24, 0x00	; 0
     430:	90 40       	sbci	r25, 0x00	; 0

				if (UsageListSize)
     432:	e1 f7       	brne	.-8      	; 0x42c <SetupHardware+0xe2>
     434:	00 c0       	rjmp	.+0      	; 0x436 <SetupHardware+0xec>
     436:	00 00       	nop
     438:	d5 d1       	rcall	.+938    	; 0x7e4 <USB_Init>
     43a:	84 e0       	ldi	r24, 0x04	; 4
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];
     43c:	85 bd       	out	0x25, r24	; 37
     43e:	c8 5a       	subi	r28, 0xA8	; 168
     440:	df 4f       	sbci	r29, 0xFF	; 255
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	df 91       	pop	r29

					for (uint8_t i = 0; i < UsageListSize; i++)
     44e:	cf 91       	pop	r28
					  UsageList[i] = UsageList[i + 1];
     450:	08 95       	ret

00000452 <main>:
     452:	7b df       	rcall	.-266    	; 0x34a <SetupHardware>
     454:	e6 e7       	ldi	r30, 0x76	; 118
     456:	f1 e0       	ldi	r31, 0x01	; 1

				if (UsageListSize)
				{
					CurrCollectionPath->Usage.Usage = UsageList[0];

					for (uint8_t i = 0; i < UsageListSize; i++)
     458:	4f b7       	in	r20, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	82 e8       	ldi	r24, 0x82	; 130
     45e:	91 e0       	ldi	r25, 0x01	; 1
     460:	91 83       	std	Z+1, r25	; 0x01
     462:	80 83       	st	Z, r24
					  UsageList[i] = UsageList[i + 1];

					UsageListSize--;
     464:	93 83       	std	Z+3, r25	; 0x03
     466:	82 83       	std	Z+2, r24	; 0x02
     468:	95 83       	std	Z+5, r25	; 0x05
     46a:	84 83       	std	Z+4, r24	; 0x04
     46c:	82 e0       	ldi	r24, 0x02	; 2
				}
				else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	97 83       	std	Z+7, r25	; 0x07
     472:	86 83       	std	Z+6, r24	; 0x06
     474:	20 e8       	ldi	r18, 0x80	; 128
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	31 87       	std	Z+9, r19	; 0x09
				{
					CurrCollectionPath->Usage.Usage = UsageMinMax.Minimum++;
     47a:	20 87       	std	Z+8, r18	; 0x08
     47c:	13 86       	std	Z+11, r1	; 0x0b
     47e:	12 86       	std	Z+10, r1	; 0x0a
     480:	4f bf       	out	0x3f, r20	; 63
     482:	e2 e0       	ldi	r30, 0x02	; 2
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	4f b7       	in	r20, 0x3f	; 63
     488:	f8 94       	cli
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
     48a:	8e e0       	ldi	r24, 0x0E	; 14
     48c:	92 e0       	ldi	r25, 0x02	; 2
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
				  return HID_PARSE_UnexpectedEndCollection;

				CurrCollectionPath = CurrCollectionPath->Parent;
     492:	93 83       	std	Z+3, r25	; 0x03
     494:	82 83       	std	Z+2, r24	; 0x02
     496:	95 83       	std	Z+5, r25	; 0x05
				break;
     498:	84 83       	std	Z+4, r24	; 0x04
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
				{
					HID_ReportItem_t NewReportItem;

					memcpy(&NewReportItem.Attributes,
     49a:	8e e8       	ldi	r24, 0x8E	; 142
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	97 83       	std	Z+7, r25	; 0x07
     4a0:	86 83       	std	Z+6, r24	; 0x06
     4a2:	31 87       	std	Z+9, r19	; 0x09
     4a4:	20 87       	std	Z+8, r18	; 0x08
     4a6:	13 86       	std	Z+11, r1	; 0x0b
     4a8:	12 86       	std	Z+10, r1	; 0x0a
     4aa:	4f bf       	out	0x3f, r20	; 63
					       &CurrStateTable->Attributes,
					       sizeof(HID_ReportItem_Attributes_t));

					NewReportItem.ItemFlags      = ReportItemData;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
					NewReportItem.CollectionPath = CurrCollectionPath;
     4b0:	9e de       	rcall	.-708    	; 0x1ee <LEDs_SetAllLEDs>
     4b2:	78 94       	sei
     4b4:	1e 9b       	sbis	0x03, 6	; 3
     4b6:	03 c0       	rjmp	.+6      	; 0x4be <main+0x6c>
					NewReportItem.ReportID       = CurrStateTable->ReportID;
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <main+0x70>
     4be:	80 e0       	ldi	r24, 0x00	; 0

					if (UsageListSize)
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	95 de       	rcall	.-726    	; 0x1ee <LEDs_SetAllLEDs>
     4c4:	8f b7       	in	r24, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	20 91 80 01 	lds	r18, 0x0180
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];
     4cc:	30 91 81 01 	lds	r19, 0x0181
     4d0:	8f bf       	out	0x3f, r24	; 63
     4d2:	80 91 7e 01 	lds	r24, 0x017E
     4d6:	90 91 7f 01 	lds	r25, 0x017F
     4da:	28 17       	cp	r18, r24
     4dc:	39 07       	cpc	r19, r25
     4de:	49 f0       	breq	.+18     	; 0x4f2 <main+0xa0>

						for (uint8_t i = 0; i < UsageListSize; i++)
     4e0:	80 e0       	ldi	r24, 0x00	; 0
						  UsageList[i] = UsageList[i + 1];
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	60 d5       	rcall	.+2752   	; 0xfa6 <CDC_Device_ReceiveByte>
     4e6:	97 fd       	sbrc	r25, 7
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <main+0xa0>

					if (UsageListSize)
					{
						NewReportItem.Attributes.Usage.Usage = UsageList[0];

						for (uint8_t i = 0; i < UsageListSize; i++)
     4ea:	68 2f       	mov	r22, r24
     4ec:	86 e7       	ldi	r24, 0x76	; 118
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	4a de       	rcall	.-876    	; 0x186 <RingBuffer_Insert>
     4f2:	8f b7       	in	r24, 0x3f	; 63
     4f4:	f8 94       	cli
						  UsageList[i] = UsageList[i + 1];

						UsageListSize--;
     4f6:	c0 91 0c 02 	lds	r28, 0x020C
     4fa:	d0 91 0d 02 	lds	r29, 0x020D
     4fe:	8f bf       	out	0x3f, r24	; 63
					}
					else if (UsageMinMax.Minimum <= UsageMinMax.Maximum)
     500:	a8 99       	sbic	0x15, 0	; 21
     502:	0d c0       	rjmp	.+26     	; 0x51e <main+0xcc>
     504:	c1 36       	cpi	r28, 0x61	; 97
     506:	d1 05       	cpc	r29, r1
     508:	50 f4       	brcc	.+20     	; 0x51e <main+0xcc>
					{
						NewReportItem.Attributes.Usage.Usage = UsageMinMax.Minimum++;
     50a:	2f b7       	in	r18, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	80 91 80 01 	lds	r24, 0x0180
     512:	90 91 81 01 	lds	r25, 0x0181
     516:	2f bf       	out	0x3f, r18	; 63
     518:	89 2b       	or	r24, r25
     51a:	e9 f0       	breq	.+58     	; 0x556 <main+0x104>
					}

					uint8_t ItemTypeTag = (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK));

					if (ItemTypeTag == HID_RI_INPUT(0))
     51c:	13 c0       	rjmp	.+38     	; 0x544 <main+0xf2>
     51e:	a8 9a       	sbi	0x15, 0	; 21
					  NewReportItem.ItemType = HID_REPORT_ITEM_In;
     520:	0e c0       	rjmp	.+28     	; 0x53e <main+0xec>
     522:	e0 91 04 02 	lds	r30, 0x0204
					else if (ItemTypeTag == HID_RI_OUTPUT(0))
     526:	f0 91 05 02 	lds	r31, 0x0205
					  NewReportItem.ItemType = HID_REPORT_ITEM_Out;
     52a:	60 81       	ld	r22, Z
     52c:	80 e0       	ldi	r24, 0x00	; 0
					else
					  NewReportItem.ItemType = HID_REPORT_ITEM_Feature;
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	d7 d4       	rcall	.+2478   	; 0xee0 <CDC_Device_SendByte>

					NewReportItem.BitOffset = CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType];
     532:	21 97       	sbiw	r28, 0x01	; 1
     534:	81 11       	cpse	r24, r1
     536:	e9 cf       	rjmp	.-46     	; 0x50a <main+0xb8>
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	3f de       	rcall	.-898    	; 0x1bc <RingBuffer_Remove>
     53e:	20 97       	sbiw	r28, 0x00	; 0
     540:	81 f7       	brne	.-32     	; 0x522 <main+0xd0>
     542:	e3 cf       	rjmp	.-58     	; 0x50a <main+0xb8>
     544:	86 e7       	ldi	r24, 0x76	; 118
     546:	91 e0       	ldi	r25, 0x01	; 1

					CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType] += CurrStateTable->Attributes.BitSize;
     548:	39 de       	rcall	.-910    	; 0x1bc <RingBuffer_Remove>
     54a:	90 91 c8 00 	lds	r25, 0x00C8
     54e:	95 ff       	sbrs	r25, 5
     550:	fc cf       	rjmp	.-8      	; 0x54a <main+0xf8>
     552:	80 93 ce 00 	sts	0x00CE, r24
     556:	80 e0       	ldi	r24, 0x00	; 0

					ParserData->LargestReportSizeBits = MAX(ParserData->LargestReportSizeBits, CurrReportIDInfo->ReportSizeBits[NewReportItem.ItemType]);
     558:	91 e0       	ldi	r25, 0x01	; 1
     55a:	17 d5       	rcall	.+2606   	; 0xf8a <CDC_Device_USBTask>
     55c:	81 d4       	rcall	.+2306   	; 0xe60 <USB_USBTask>
     55e:	aa cf       	rjmp	.-172    	; 0x4b4 <main+0x62>

00000560 <CALLBACK_USB_GetDescriptor>:
     560:	29 2f       	mov	r18, r25
     562:	33 27       	eor	r19, r19
     564:	22 30       	cpi	r18, 0x02	; 2
     566:	31 05       	cpc	r19, r1
     568:	39 f0       	breq	.+14     	; 0x578 <CALLBACK_USB_GetDescriptor+0x18>
     56a:	23 30       	cpi	r18, 0x03	; 3
     56c:	31 05       	cpc	r19, r1
     56e:	49 f0       	breq	.+18     	; 0x582 <CALLBACK_USB_GetDescriptor+0x22>
     570:	21 30       	cpi	r18, 0x01	; 1
     572:	31 05       	cpc	r19, r1
     574:	21 f1       	breq	.+72     	; 0x5be <CALLBACK_USB_GetDescriptor+0x5e>
     576:	28 c0       	rjmp	.+80     	; 0x5c8 <CALLBACK_USB_GetDescriptor+0x68>
     578:	ee e3       	ldi	r30, 0x3E	; 62
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	8a ef       	ldi	r24, 0xFA	; 250
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	27 c0       	rjmp	.+78     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
     582:	99 27       	eor	r25, r25
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	91 05       	cpc	r25, r1
     588:	61 f0       	breq	.+24     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x42>
     58a:	82 30       	cpi	r24, 0x02	; 2
     58c:	91 05       	cpc	r25, r1
     58e:	81 f0       	breq	.+32     	; 0x5b0 <CALLBACK_USB_GetDescriptor+0x50>
     590:	89 2b       	or	r24, r25
     592:	d1 f4       	brne	.+52     	; 0x5c8 <CALLBACK_USB_GetDescriptor+0x68>
     594:	e6 ef       	ldi	r30, 0xF6	; 246
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	e4 91       	lpm	r30, Z
     59a:	f0 e0       	ldi	r31, 0x00	; 0
     59c:	86 ef       	ldi	r24, 0xF6	; 246
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	17 c0       	rjmp	.+46     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
     5a2:	ec ed       	ldi	r30, 0xDC	; 220
     5a4:	f0 e0       	ldi	r31, 0x00	; 0

					if (ParserData->TotalReportItems == HID_MAX_REPORTITEMS)
     5a6:	e4 91       	lpm	r30, Z
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	8c ed       	ldi	r24, 0xDC	; 220
     5ac:	90 e0       	ldi	r25, 0x00	; 0
					  return HID_PARSE_InsufficientReportItems;
     5ae:	10 c0       	rjmp	.+32     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
     5b0:	ec ea       	ldi	r30, 0xAC	; 172

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	e4 91       	lpm	r30, Z
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	8c ea       	ldi	r24, 0xAC	; 172
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	09 c0       	rjmp	.+18     	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
     5be:	e2 e1       	ldi	r30, 0x12	; 18
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	88 e3       	ldi	r24, 0x38	; 56
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <CALLBACK_USB_GetDescriptor+0x70>
     5c8:	e0 e0       	ldi	r30, 0x00	; 0
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 e0       	ldi	r24, 0x00	; 0
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	da 01       	movw	r26, r20
     5d2:	8d 93       	st	X+, r24
     5d4:	9c 93       	st	X, r25
     5d6:	cf 01       	movw	r24, r30
     5d8:	08 95       	ret

000005da <Endpoint_ConfigureEndpoint_Prv>:
     5da:	98 2f       	mov	r25, r24
     5dc:	2c c0       	rjmp	.+88     	; 0x636 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     5de:	90 93 e9 00 	sts	0x00E9, r25
     5e2:	98 17       	cp	r25, r24
     5e4:	39 f0       	breq	.+14     	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     5e6:	70 91 ec 00 	lds	r23, 0x00EC
     5ea:	20 91 ed 00 	lds	r18, 0x00ED
     5ee:	50 91 f0 00 	lds	r21, 0x00F0
     5f2:	03 c0       	rjmp	.+6      	; 0x5fa <Endpoint_ConfigureEndpoint_Prv+0x20>
     5f4:	24 2f       	mov	r18, r20
     5f6:	76 2f       	mov	r23, r22
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	21 fd       	sbrc	r18, 1
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <Endpoint_ConfigureEndpoint_Prv+0x28>
     5fe:	9f 5f       	subi	r25, 0xFF	; 255
     600:	1a c0       	rjmp	.+52     	; 0x636 <Endpoint_ConfigureEndpoint_Prv+0x5c>
     602:	30 91 eb 00 	lds	r19, 0x00EB
     606:	3e 7f       	andi	r19, 0xFE	; 254
     608:	30 93 eb 00 	sts	0x00EB, r19
     60c:	30 91 ed 00 	lds	r19, 0x00ED
     610:	3d 7f       	andi	r19, 0xFD	; 253
     612:	30 93 ed 00 	sts	0x00ED, r19
     616:	30 91 eb 00 	lds	r19, 0x00EB
     61a:	31 60       	ori	r19, 0x01	; 1
     61c:	30 93 eb 00 	sts	0x00EB, r19
     620:	70 93 ec 00 	sts	0x00EC, r23
     624:	20 93 ed 00 	sts	0x00ED, r18
     628:	50 93 f0 00 	sts	0x00F0, r21
     62c:	20 91 ee 00 	lds	r18, 0x00EE
     630:	27 fd       	sbrc	r18, 7
     632:	e5 cf       	rjmp	.-54     	; 0x5fe <Endpoint_ConfigureEndpoint_Prv+0x24>
     634:	07 c0       	rjmp	.+14     	; 0x644 <Endpoint_ConfigureEndpoint_Prv+0x6a>
     636:	97 30       	cpi	r25, 0x07	; 7
     638:	90 f2       	brcs	.-92     	; 0x5de <Endpoint_ConfigureEndpoint_Prv+0x4>
     63a:	8f 70       	andi	r24, 0x0F	; 15
     63c:	80 93 e9 00 	sts	0x00E9, r24
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	08 95       	ret
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	08 95       	ret

00000648 <Endpoint_ConfigureEndpointTable>:
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	06 2f       	mov	r16, r22
     652:	ec 01       	movw	r28, r24
     654:	10 e0       	ldi	r17, 0x00	; 0
     656:	2f c0       	rjmp	.+94     	; 0x6b6 <Endpoint_ConfigureEndpointTable+0x6e>
     658:	98 81       	ld	r25, Y
     65a:	91 11       	cpse	r25, r1
     65c:	03 c0       	rjmp	.+6      	; 0x664 <Endpoint_ConfigureEndpointTable+0x1c>
     65e:	1f 5f       	subi	r17, 0xFF	; 255
     660:	25 96       	adiw	r28, 0x05	; 5
     662:	29 c0       	rjmp	.+82     	; 0x6b6 <Endpoint_ConfigureEndpointTable+0x6e>
     664:	2c 81       	ldd	r18, Y+4	; 0x04
     666:	e9 81       	ldd	r30, Y+1	; 0x01
     668:	fa 81       	ldd	r31, Y+2	; 0x02
     66a:	7b 81       	ldd	r23, Y+3	; 0x03
					  ParserData->TotalReportItems++;
     66c:	89 2f       	mov	r24, r25
     66e:	8f 70       	andi	r24, 0x0F	; 15
     670:	87 30       	cpi	r24, 0x07	; 7
     672:	10 f0       	brcs	.+4      	; 0x678 <Endpoint_ConfigureEndpointTable+0x30>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	22 c0       	rjmp	.+68     	; 0x6bc <Endpoint_ConfigureEndpointTable+0x74>
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     678:	22 30       	cpi	r18, 0x02	; 2
					  return HID_PARSE_InsufficientReportItems;

					memcpy(&ParserData->ReportItems[ParserData->TotalReportItems],
					       &NewReportItem, sizeof(HID_ReportItem_t));

					if (!(ReportItemData & HID_IOF_CONSTANT) && CALLBACK_HIDParser_FilterHIDReportItem(&NewReportItem))
     67a:	10 f0       	brcs	.+4      	; 0x680 <Endpoint_ConfigureEndpointTable+0x38>
     67c:	56 e0       	ldi	r21, 0x06	; 6
     67e:	01 c0       	rjmp	.+2      	; 0x682 <Endpoint_ConfigureEndpointTable+0x3a>
     680:	52 e0       	ldi	r21, 0x02	; 2
     682:	28 e0       	ldi	r18, 0x08	; 8
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	40 e0       	ldi	r20, 0x00	; 0
     688:	03 c0       	rjmp	.+6      	; 0x690 <Endpoint_ConfigureEndpointTable+0x48>
     68a:	4f 5f       	subi	r20, 0xFF	; 255
     68c:	22 0f       	add	r18, r18
     68e:	33 1f       	adc	r19, r19
     690:	2e 17       	cp	r18, r30
     692:	3f 07       	cpc	r19, r31
     694:	d0 f3       	brcs	.-12     	; 0x68a <Endpoint_ConfigureEndpointTable+0x42>
				CurrCollectionPath = CurrCollectionPath->Parent;
				break;
			case HID_RI_INPUT(0):
			case HID_RI_OUTPUT(0):
			case HID_RI_FEATURE(0):
				for (uint8_t ReportItemNum = 0; ReportItemNum < CurrStateTable->ReportCount; ReportItemNum++)
     696:	42 95       	swap	r20
     698:	40 7f       	andi	r20, 0xF0	; 240
     69a:	45 2b       	or	r20, r21
     69c:	69 2f       	mov	r22, r25
     69e:	66 1f       	adc	r22, r22
     6a0:	66 27       	eor	r22, r22
     6a2:	66 1f       	adc	r22, r22
				ReportSize     -= 1;
				ReportData     += 1;
				break;
		}

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
     6a4:	90 e4       	ldi	r25, 0x40	; 64
     6a6:	79 9f       	mul	r23, r25
				}

				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
     6a8:	90 01       	movw	r18, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	62 2b       	or	r22, r18
     6ae:	95 df       	rcall	.-214    	; 0x5da <Endpoint_ConfigureEndpoint_Prv>
     6b0:	81 11       	cpse	r24, r1
		{
			UsageMinMax.Minimum = 0;
			UsageMinMax.Maximum = 0;
     6b2:	d5 cf       	rjmp	.-86     	; 0x65e <Endpoint_ConfigureEndpointTable+0x16>
     6b4:	df cf       	rjmp	.-66     	; 0x674 <Endpoint_ConfigureEndpointTable+0x2c>
     6b6:	10 13       	cpse	r17, r16
				break;
		}

		if ((HIDReportItem & HID_RI_TYPE_MASK) == HID_RI_TYPE_MAIN)
		{
			UsageMinMax.Minimum = 0;
     6b8:	cf cf       	rjmp	.-98     	; 0x658 <Endpoint_ConfigureEndpointTable+0x10>
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	df 91       	pop	r29
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
	memset(CurrStateTable,   0x00, sizeof(HID_StateTable_t));
	memset(CurrReportIDInfo, 0x00, sizeof(HID_ReportSizeInfo_t));

	ParserData->TotalDeviceReports = 1;

	while (ReportSize)
     6c4:	08 95       	ret

000006c6 <Endpoint_ClearStatusStage>:
     6c6:	80 91 92 02 	lds	r24, 0x0292
     6ca:	87 fd       	sbrc	r24, 7
     6cc:	05 c0       	rjmp	.+10     	; 0x6d8 <Endpoint_ClearStatusStage+0x12>
     6ce:	80 91 e8 00 	lds	r24, 0x00E8
			UsageMinMax.Maximum = 0;
			UsageListSize       = 0;
		}
	}

	if (!(ParserData->TotalReportItems))
     6d2:	80 ff       	sbrs	r24, 0
     6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <Endpoint_ClearStatusStage+0x2a>
     6d6:	10 c0       	rjmp	.+32     	; 0x6f8 <Endpoint_ClearStatusStage+0x32>
     6d8:	80 91 e8 00 	lds	r24, 0x00E8
	  return HID_PARSE_NoUnfilteredReportItems;
     6dc:	82 fd       	sbrc	r24, 2

		switch (HIDReportItem & (HID_RI_TYPE_MASK | HID_RI_TAG_MASK))
		{
			case HID_RI_PUSH(0):
				if (CurrStateTable == &StateTable[HID_STATETABLE_STACK_DEPTH - 1])
				  return HID_PARSE_HIDStackOverflow;
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <Endpoint_ClearStatusStage+0x22>
     6e0:	8e b3       	in	r24, 0x1e	; 30

				CurrStateTable++;
				break;
			case HID_RI_POP(0):
				if (CurrStateTable == &StateTable[0])
				  return HID_PARSE_HIDStackUnderflow;
     6e2:	81 11       	cpse	r24, r1
     6e4:	f9 cf       	rjmp	.-14     	; 0x6d8 <Endpoint_ClearStatusStage+0x12>

				CurrReportIDInfo->ReportID = CurrStateTable->ReportID;
				break;
			case HID_RI_USAGE(0):
				if (UsageListSize == HID_USAGE_STACK_DEPTH)
				  return HID_PARSE_UsageListOverflow;
     6e6:	08 95       	ret
     6e8:	80 91 e8 00 	lds	r24, 0x00E8
					CurrCollectionPath = &ParserData->CollectionPaths[1];

					while (CurrCollectionPath->Parent != NULL)
					{
						if (CurrCollectionPath == &ParserData->CollectionPaths[HID_MAX_COLLECTIONS - 1])
						  return HID_PARSE_InsufficientCollectionPaths;
     6ec:	8b 77       	andi	r24, 0x7B	; 123
				}

				break;
			case HID_RI_END_COLLECTION(0):
				if (CurrCollectionPath == NULL)
				  return HID_PARSE_UnexpectedEndCollection;
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <Endpoint_ClearStatusStage+0x38>
     6f0:	8e b3       	in	r24, 0x1e	; 30
	}

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
     6f2:	81 11       	cpse	r24, r1
     6f4:	ec cf       	rjmp	.-40     	; 0x6ce <Endpoint_ClearStatusStage+0x8>
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
						  return HID_PARSE_InsufficientReportIDItems;
     6f6:	08 95       	ret
     6f8:	80 91 e8 00 	lds	r24, 0x00E8
						}
					}

					if (CurrReportIDInfo == NULL)
					{
						if (ParserData->TotalDeviceReports == HID_MAX_REPORT_IDS)
     6fc:	8e 77       	andi	r24, 0x7E	; 126
     6fe:	80 93 e8 00 	sts	0x00E8, r24

	if (!(ParserData->TotalReportItems))
	  return HID_PARSE_NoUnfilteredReportItems;

	return HID_PARSE_Successful;
}
     702:	08 95       	ret

00000704 <Endpoint_WaitUntilReady>:
     704:	80 91 e4 00 	lds	r24, 0x00E4
     708:	90 91 e5 00 	lds	r25, 0x00E5
     70c:	45 e6       	ldi	r20, 0x65	; 101
     70e:	20 91 ec 00 	lds	r18, 0x00EC
     712:	20 fd       	sbrc	r18, 0
     714:	1e c0       	rjmp	.+60     	; 0x752 <Endpoint_WaitUntilReady+0x4e>
     716:	22 c0       	rjmp	.+68     	; 0x75c <Endpoint_WaitUntilReady+0x58>
     718:	2e b3       	in	r18, 0x1e	; 30
     71a:	22 23       	and	r18, r18
     71c:	91 f0       	breq	.+36     	; 0x742 <Endpoint_WaitUntilReady+0x3e>
     71e:	25 30       	cpi	r18, 0x05	; 5
     720:	91 f0       	breq	.+36     	; 0x746 <Endpoint_WaitUntilReady+0x42>
     722:	20 91 eb 00 	lds	r18, 0x00EB
     726:	25 fd       	sbrc	r18, 5
     728:	10 c0       	rjmp	.+32     	; 0x74a <Endpoint_WaitUntilReady+0x46>
     72a:	20 91 e4 00 	lds	r18, 0x00E4
     72e:	30 91 e5 00 	lds	r19, 0x00E5
     732:	28 17       	cp	r18, r24
     734:	39 07       	cpc	r19, r25
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     736:	59 f3       	breq	.-42     	; 0x70e <Endpoint_WaitUntilReady+0xa>
     738:	41 50       	subi	r20, 0x01	; 1
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     73a:	c9 01       	movw	r24, r18
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     73c:	41 f7       	brne	.-48     	; 0x70e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     742:	82 e0       	ldi	r24, 0x02	; 2
     744:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	08 95       	ret
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     752:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     756:	20 ff       	sbrs	r18, 0
     758:	df cf       	rjmp	.-66     	; 0x718 <Endpoint_WaitUntilReady+0x14>
     75a:	f9 cf       	rjmp	.-14     	; 0x74e <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     75c:	20 91 e8 00 	lds	r18, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     760:	22 ff       	sbrs	r18, 2
     762:	da cf       	rjmp	.-76     	; 0x718 <Endpoint_WaitUntilReady+0x14>
     764:	f4 cf       	rjmp	.-24     	; 0x74e <Endpoint_WaitUntilReady+0x4a>

00000766 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	cf 93       	push	r28
     76c:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     76e:	45 d0       	rcall	.+138    	; 0x7fa <USB_INT_DisableAllInterrupts>
     770:	4c d0       	rcall	.+152    	; 0x80a <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
     772:	c8 ed       	ldi	r28, 0xD8	; 216
     774:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     776:	88 81       	ld	r24, Y
     778:	8f 77       	andi	r24, 0x7F	; 127
     77a:	88 83       	st	Y, r24
     77c:	88 81       	ld	r24, Y
     77e:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
     780:	88 83       	st	Y, r24
     782:	88 81       	ld	r24, Y
     784:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     786:	88 83       	st	Y, r24
     788:	19 bc       	out	0x29, r1	; 41
     78a:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     78c:	10 92 8e 02 	sts	0x028E, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
     790:	10 92 90 02 	sts	0x0290, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     794:	10 92 8f 02 	sts	0x028F, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     798:	00 ee       	ldi	r16, 0xE0	; 224
     79a:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     79c:	f8 01       	movw	r30, r16
     79e:	80 81       	ld	r24, Z
     7a0:	8b 7f       	andi	r24, 0xFB	; 251
     7a2:	80 83       	st	Z, r24
     7a4:	88 81       	ld	r24, Y
     7a6:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     7a8:	88 83       	st	Y, r24
     7aa:	42 e0       	ldi	r20, 0x02	; 2
     7ac:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	14 df       	rcall	.-472    	; 0x5da <Endpoint_ConfigureEndpoint_Prv>
     7b2:	e1 ee       	ldi	r30, 0xE1	; 225
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7b8:	8e 7f       	andi	r24, 0xFE	; 254
     7ba:	80 83       	st	Z, r24
     7bc:	e2 ee       	ldi	r30, 0xE2	; 226
     7be:	f0 e0       	ldi	r31, 0x00	; 0
     7c0:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7c2:	81 60       	ori	r24, 0x01	; 1
     7c4:	80 83       	st	Z, r24
     7c6:	80 81       	ld	r24, Z
     7c8:	88 60       	ori	r24, 0x08	; 8
     7ca:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7cc:	f8 01       	movw	r30, r16
     7ce:	80 81       	ld	r24, Z
     7d0:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7d2:	80 83       	st	Z, r24
     7d4:	88 81       	ld	r24, Y
     7d6:	80 61       	ori	r24, 0x10	; 16
     7d8:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7e0:	0f 91       	pop	r16
     7e2:	08 95       	ret

000007e4 <USB_Init>:
     7e4:	e7 ed       	ldi	r30, 0xD7	; 215
     7e6:	f0 e0       	ldi	r31, 0x00	; 0
     7e8:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     7ea:	81 60       	ori	r24, 0x01	; 1
     7ec:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7f2:	81 e0       	ldi	r24, 0x01	; 1
     7f4:	80 93 91 02 	sts	0x0291, r24

	USB_ResetInterface();
     7f8:	b6 cf       	rjmp	.-148    	; 0x766 <USB_ResetInterface>

000007fa <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     7fa:	e8 ed       	ldi	r30, 0xD8	; 216
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	8e 7f       	andi	r24, 0xFE	; 254
     802:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     804:	10 92 e2 00 	sts	0x00E2, r1
     808:	08 95       	ret

0000080a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     80a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     80e:	10 92 e1 00 	sts	0x00E1, r1
     812:	08 95       	ret

00000814 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     814:	1f 92       	push	r1
     816:	0f 92       	push	r0
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	0f 92       	push	r0
     81c:	11 24       	eor	r1, r1
     81e:	2f 93       	push	r18
     820:	3f 93       	push	r19
     822:	4f 93       	push	r20
     824:	5f 93       	push	r21
     826:	6f 93       	push	r22
     828:	7f 93       	push	r23
     82a:	8f 93       	push	r24
     82c:	9f 93       	push	r25
     82e:	af 93       	push	r26
     830:	bf 93       	push	r27
     832:	ef 93       	push	r30
     834:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     836:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     83a:	82 ff       	sbrs	r24, 2
     83c:	0a c0       	rjmp	.+20     	; 0x852 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     83e:	80 91 e2 00 	lds	r24, 0x00E2
     842:	82 ff       	sbrs	r24, 2
     844:	06 c0       	rjmp	.+12     	; 0x852 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     846:	80 91 e1 00 	lds	r24, 0x00E1
     84a:	8b 7f       	andi	r24, 0xFB	; 251
     84c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     850:	06 d3       	rcall	.+1548   	; 0xe5e <USB_Event_Stub>
     852:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     856:	80 ff       	sbrs	r24, 0
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     858:	19 c0       	rjmp	.+50     	; 0x88c <__vector_10+0x78>
     85a:	80 91 d8 00 	lds	r24, 0x00D8
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     85e:	80 ff       	sbrs	r24, 0
     860:	15 c0       	rjmp	.+42     	; 0x88c <__vector_10+0x78>
     862:	80 91 da 00 	lds	r24, 0x00DA
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     866:	8e 7f       	andi	r24, 0xFE	; 254
     868:	80 93 da 00 	sts	0x00DA, r24
     86c:	80 91 d9 00 	lds	r24, 0x00D9
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     870:	19 bc       	out	0x29, r1	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     872:	80 ff       	sbrs	r24, 0
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     874:	09 c0       	rjmp	.+18     	; 0x888 <__vector_10+0x74>
     876:	82 e0       	ldi	r24, 0x02	; 2
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     878:	89 bd       	out	0x29, r24	; 41
     87a:	09 b4       	in	r0, 0x29	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     87c:	00 fe       	sbrs	r0, 0
     87e:	fd cf       	rjmp	.-6      	; 0x87a <__vector_10+0x66>
     880:	81 e0       	ldi	r24, 0x01	; 1
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     882:	8e bb       	out	0x1e, r24	; 30
     884:	d5 dc       	rcall	.-1622   	; 0x230 <EVENT_USB_Device_Connect>
			EVENT_USB_Device_Connect();
     886:	02 c0       	rjmp	.+4      	; 0x88c <__vector_10+0x78>
     888:	1e ba       	out	0x1e, r1	; 30
     88a:	d3 dc       	rcall	.-1626   	; 0x232 <EVENT_USB_Device_Disconnect>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     88c:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
     890:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     892:	17 c0       	rjmp	.+46     	; 0x8c2 <__vector_10+0xae>
     894:	80 91 e2 00 	lds	r24, 0x00E2
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     898:	80 ff       	sbrs	r24, 0
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     89a:	13 c0       	rjmp	.+38     	; 0x8c2 <__vector_10+0xae>
     89c:	80 91 e2 00 	lds	r24, 0x00E2
     8a0:	8e 7f       	andi	r24, 0xFE	; 254
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     8a2:	80 93 e2 00 	sts	0x00E2, r24
     8a6:	80 91 e2 00 	lds	r24, 0x00E2
     8aa:	80 61       	ori	r24, 0x10	; 16
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     8ac:	80 93 e2 00 	sts	0x00E2, r24
     8b0:	80 91 d8 00 	lds	r24, 0x00D8
     8b4:	80 62       	ori	r24, 0x20	; 32
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     8b6:	80 93 d8 00 	sts	0x00D8, r24
     8ba:	19 bc       	out	0x29, r1	; 41
     8bc:	85 e0       	ldi	r24, 0x05	; 5
     8be:	8e bb       	out	0x1e, r24	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8c0:	ce d2       	rcall	.+1436   	; 0xe5e <USB_Event_Stub>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     8c2:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
     8c6:	84 ff       	sbrs	r24, 4
     8c8:	2b c0       	rjmp	.+86     	; 0x920 <__vector_10+0x10c>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     8ca:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     8ce:	84 ff       	sbrs	r24, 4
     8d0:	27 c0       	rjmp	.+78     	; 0x920 <__vector_10+0x10c>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     8d2:	19 bc       	out	0x29, r1	; 41
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	89 bd       	out	0x29, r24	; 41
     8d8:	09 b4       	in	r0, 0x29	; 41

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8da:	00 fe       	sbrs	r0, 0
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8dc:	fd cf       	rjmp	.-6      	; 0x8d8 <__vector_10+0xc4>
     8de:	80 91 d8 00 	lds	r24, 0x00D8
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     8e2:	8f 7d       	andi	r24, 0xDF	; 223
     8e4:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     8e8:	80 91 e1 00 	lds	r24, 0x00E1
     8ec:	8f 7e       	andi	r24, 0xEF	; 239
     8ee:	80 93 e1 00 	sts	0x00E1, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     8f2:	80 91 e2 00 	lds	r24, 0x00E2
     8f6:	8f 7e       	andi	r24, 0xEF	; 239
     8f8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     8fc:	80 91 e2 00 	lds	r24, 0x00E2
     900:	81 60       	ori	r24, 0x01	; 1
     902:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     906:	80 91 8e 02 	lds	r24, 0x028E
     90a:	81 11       	cpse	r24, r1
     90c:	04 c0       	rjmp	.+8      	; 0x916 <__vector_10+0x102>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     90e:	80 91 e3 00 	lds	r24, 0x00E3
     912:	87 ff       	sbrs	r24, 7
     914:	02 c0       	rjmp	.+4      	; 0x91a <__vector_10+0x106>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     916:	84 e0       	ldi	r24, 0x04	; 4
     918:	01 c0       	rjmp	.+2      	; 0x91c <__vector_10+0x108>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	8e bb       	out	0x1e, r24	; 30
     91e:	9f d2       	rcall	.+1342   	; 0xe5e <USB_Event_Stub>
     920:	80 91 e1 00 	lds	r24, 0x00E1
     924:	83 ff       	sbrs	r24, 3

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     926:	26 c0       	rjmp	.+76     	; 0x974 <__vector_10+0x160>
     928:	80 91 e2 00 	lds	r24, 0x00E2
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     92c:	83 ff       	sbrs	r24, 3
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     92e:	22 c0       	rjmp	.+68     	; 0x974 <__vector_10+0x160>
     930:	80 91 e1 00 	lds	r24, 0x00E1
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     934:	87 7f       	andi	r24, 0xF7	; 247
     936:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	8e bb       	out	0x1e, r24	; 30
     93e:	10 92 8e 02 	sts	0x028E, r1
     942:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     946:	8e 7f       	andi	r24, 0xFE	; 254
		USB_Device_ConfigurationNumber = 0;
     948:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     94c:	80 91 e2 00 	lds	r24, 0x00E2
     950:	8e 7f       	andi	r24, 0xFE	; 254
     952:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     956:	80 91 e2 00 	lds	r24, 0x00E2
     95a:	80 61       	ori	r24, 0x10	; 16
     95c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     960:	42 e0       	ldi	r20, 0x02	; 2
     962:	60 e0       	ldi	r22, 0x00	; 0
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	39 de       	rcall	.-910    	; 0x5da <Endpoint_ConfigureEndpoint_Prv>
     968:	80 91 f0 00 	lds	r24, 0x00F0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     96c:	88 60       	ori	r24, 0x08	; 8
     96e:	80 93 f0 00 	sts	0x00F0, r24
     972:	75 d2       	rcall	.+1258   	; 0xe5e <USB_Event_Stub>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     974:	ff 91       	pop	r31
     976:	ef 91       	pop	r30
     978:	bf 91       	pop	r27
     97a:	af 91       	pop	r26
     97c:	9f 91       	pop	r25

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     97e:	8f 91       	pop	r24
     980:	7f 91       	pop	r23
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     982:	6f 91       	pop	r22
     984:	5f 91       	pop	r21
     986:	4f 91       	pop	r20
     988:	3f 91       	pop	r19
     98a:	2f 91       	pop	r18
     98c:	0f 90       	pop	r0
     98e:	0f be       	out	0x3f, r0	; 63
     990:	0f 90       	pop	r0
     992:	1f 90       	pop	r1
     994:	18 95       	reti

00000996 <__vector_11>:
     996:	1f 92       	push	r1
     998:	0f 92       	push	r0
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	0f 92       	push	r0
     99e:	11 24       	eor	r1, r1
     9a0:	2f 93       	push	r18
     9a2:	3f 93       	push	r19

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     9a4:	4f 93       	push	r20
     9a6:	5f 93       	push	r21
     9a8:	6f 93       	push	r22
     9aa:	7f 93       	push	r23
     9ac:	8f 93       	push	r24
     9ae:	9f 93       	push	r25
     9b0:	af 93       	push	r26
     9b2:	bf 93       	push	r27
     9b4:	cf 93       	push	r28
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     9ba:	80 91 e9 00 	lds	r24, 0x00E9
     9be:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     9c0:	90 91 ec 00 	lds	r25, 0x00EC
     9c4:	90 ff       	sbrs	r25, 0
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__vector_11+0x36>
     9c8:	90 e8       	ldi	r25, 0x80	; 128
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <__vector_11+0x38>
     9cc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     9ce:	c9 2f       	mov	r28, r25
     9d0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     9d2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     9d6:	80 91 f0 00 	lds	r24, 0x00F0
     9da:	87 7f       	andi	r24, 0xF7	; 247
     9dc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     9e0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     9e2:	d7 d0       	rcall	.+430    	; 0xb92 <USB_Device_ProcessControlRequest>
     9e4:	10 92 e9 00 	sts	0x00E9, r1
     9e8:	80 91 f0 00 	lds	r24, 0x00F0
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9ec:	88 60       	ori	r24, 0x08	; 8
     9ee:	80 93 f0 00 	sts	0x00F0, r24
     9f2:	cf 70       	andi	r28, 0x0F	; 15
     9f4:	c0 93 e9 00 	sts	0x00E9, r28
     9f8:	ff 91       	pop	r31

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     9fa:	ef 91       	pop	r30
     9fc:	cf 91       	pop	r28
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a1c:	40 91 98 02 	lds	r20, 0x0298
     a20:	50 91 99 02 	lds	r21, 0x0299
     a24:	46 17       	cp	r20, r22
     a26:	57 07       	cpc	r21, r23
     a28:	48 f0       	brcs	.+18     	; 0xa3c <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a2a:	61 15       	cp	r22, r1
     a2c:	71 05       	cpc	r23, r1
     a2e:	39 f4       	brne	.+14     	; 0xa3e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a30:	40 91 e8 00 	lds	r20, 0x00E8
     a34:	4e 77       	andi	r20, 0x7E	; 126
     a36:	40 93 e8 00 	sts	0x00E8, r20
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <Endpoint_Write_Control_Stream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a3c:	ba 01       	movw	r22, r20
     a3e:	fc 01       	movw	r30, r24
     a40:	40 e0       	ldi	r20, 0x00	; 0
     a42:	32 c0       	rjmp	.+100    	; 0xaa8 <Endpoint_Write_Control_Stream_LE+0x8c>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a44:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a46:	88 23       	and	r24, r24
     a48:	09 f4       	brne	.+2      	; 0xa4c <Endpoint_Write_Control_Stream_LE+0x30>
     a4a:	41 c0       	rjmp	.+130    	; 0xace <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a4c:	85 30       	cpi	r24, 0x05	; 5
     a4e:	09 f4       	brne	.+2      	; 0xa52 <Endpoint_Write_Control_Stream_LE+0x36>
     a50:	40 c0       	rjmp	.+128    	; 0xad2 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a52:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a56:	83 fd       	sbrc	r24, 3
     a58:	38 c0       	rjmp	.+112    	; 0xaca <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a5a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a5e:	82 fd       	sbrc	r24, 2
     a60:	2e c0       	rjmp	.+92     	; 0xabe <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a62:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a66:	80 ff       	sbrs	r24, 0
     a68:	1f c0       	rjmp	.+62     	; 0xaa8 <Endpoint_Write_Control_Stream_LE+0x8c>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     a6a:	90 91 f3 00 	lds	r25, 0x00F3
     a6e:	80 91 f2 00 	lds	r24, 0x00F2
     a72:	39 2f       	mov	r19, r25
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	a9 01       	movw	r20, r18
     a78:	48 2b       	or	r20, r24
     a7a:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a7c:	06 c0       	rjmp	.+12     	; 0xa8a <Endpoint_Write_Control_Stream_LE+0x6e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a7e:	41 91       	ld	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a80:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     a84:	61 50       	subi	r22, 0x01	; 1
     a86:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     a88:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a8a:	61 15       	cp	r22, r1
     a8c:	71 05       	cpc	r23, r1
     a8e:	19 f0       	breq	.+6      	; 0xa96 <Endpoint_Write_Control_Stream_LE+0x7a>
     a90:	88 30       	cpi	r24, 0x08	; 8
     a92:	91 05       	cpc	r25, r1
     a94:	a0 f3       	brcs	.-24     	; 0xa7e <Endpoint_Write_Control_Stream_LE+0x62>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a96:	41 e0       	ldi	r20, 0x01	; 1
     a98:	08 97       	sbiw	r24, 0x08	; 8
     a9a:	09 f0       	breq	.+2      	; 0xa9e <Endpoint_Write_Control_Stream_LE+0x82>
     a9c:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a9e:	80 91 e8 00 	lds	r24, 0x00E8
     aa2:	8e 77       	andi	r24, 0x7E	; 126
     aa4:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     aa8:	61 15       	cp	r22, r1
     aaa:	71 05       	cpc	r23, r1
     aac:	59 f6       	brne	.-106    	; 0xa44 <Endpoint_Write_Control_Stream_LE+0x28>
     aae:	41 11       	cpse	r20, r1
     ab0:	c9 cf       	rjmp	.-110    	; 0xa44 <Endpoint_Write_Control_Stream_LE+0x28>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <Endpoint_Write_Control_Stream_LE+0xa2>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ab4:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ab6:	88 23       	and	r24, r24
     ab8:	51 f0       	breq	.+20     	; 0xace <Endpoint_Write_Control_Stream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     aba:	85 30       	cpi	r24, 0x05	; 5
     abc:	51 f0       	breq	.+20     	; 0xad2 <Endpoint_Write_Control_Stream_LE+0xb6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     abe:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ac2:	82 ff       	sbrs	r24, 2
     ac4:	f7 cf       	rjmp	.-18     	; 0xab4 <Endpoint_Write_Control_Stream_LE+0x98>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     ad2:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     ad4:	08 95       	ret

00000ad6 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ad6:	40 91 98 02 	lds	r20, 0x0298
     ada:	50 91 99 02 	lds	r21, 0x0299
     ade:	46 17       	cp	r20, r22
     ae0:	57 07       	cpc	r21, r23
     ae2:	48 f0       	brcs	.+18     	; 0xaf6 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ae4:	61 15       	cp	r22, r1
     ae6:	71 05       	cpc	r23, r1
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aea:	40 91 e8 00 	lds	r20, 0x00E8
     aee:	4e 77       	andi	r20, 0x7E	; 126
     af0:	40 93 e8 00 	sts	0x00E8, r20
     af4:	01 c0       	rjmp	.+2      	; 0xaf8 <Endpoint_Write_Control_PStream_LE+0x22>
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     af6:	ba 01       	movw	r22, r20
     af8:	fc 01       	movw	r30, r24
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	33 c0       	rjmp	.+102    	; 0xb64 <__stack+0x65>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     afe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b00:	88 23       	and	r24, r24
     b02:	09 f4       	brne	.+2      	; 0xb06 <__stack+0x7>
     b04:	42 c0       	rjmp	.+132    	; 0xb8a <__stack+0x8b>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b06:	85 30       	cpi	r24, 0x05	; 5
     b08:	09 f4       	brne	.+2      	; 0xb0c <__stack+0xd>
     b0a:	41 c0       	rjmp	.+130    	; 0xb8e <__stack+0x8f>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b0c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b10:	83 fd       	sbrc	r24, 3
     b12:	39 c0       	rjmp	.+114    	; 0xb86 <__stack+0x87>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b14:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b18:	82 fd       	sbrc	r24, 2
     b1a:	2f c0       	rjmp	.+94     	; 0xb7a <__stack+0x7b>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b1c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     b20:	80 ff       	sbrs	r24, 0
     b22:	20 c0       	rjmp	.+64     	; 0xb64 <__stack+0x65>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b24:	90 91 f3 00 	lds	r25, 0x00F3
     b28:	80 91 f2 00 	lds	r24, 0x00F2
     b2c:	39 2f       	mov	r19, r25
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	a9 01       	movw	r20, r18
     b32:	48 2b       	or	r20, r24
     b34:	ca 01       	movw	r24, r20
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b36:	07 c0       	rjmp	.+14     	; 0xb46 <__stack+0x47>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b38:	44 91       	lpm	r20, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b3a:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     b3e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     b40:	61 50       	subi	r22, 0x01	; 1
     b42:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     b44:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b46:	61 15       	cp	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	19 f0       	breq	.+6      	; 0xb52 <__stack+0x53>
     b4c:	88 30       	cpi	r24, 0x08	; 8
     b4e:	91 05       	cpc	r25, r1
     b50:	98 f3       	brcs	.-26     	; 0xb38 <__stack+0x39>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	08 97       	sbiw	r24, 0x08	; 8
     b56:	09 f0       	breq	.+2      	; 0xb5a <__stack+0x5b>
     b58:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b5a:	80 91 e8 00 	lds	r24, 0x00E8
     b5e:	8e 77       	andi	r24, 0x7E	; 126
     b60:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b64:	61 15       	cp	r22, r1
     b66:	71 05       	cpc	r23, r1
     b68:	51 f6       	brne	.-108    	; 0xafe <Endpoint_Write_Control_PStream_LE+0x28>
     b6a:	41 11       	cpse	r20, r1
     b6c:	c8 cf       	rjmp	.-112    	; 0xafe <Endpoint_Write_Control_PStream_LE+0x28>
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <__stack+0x7b>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b70:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b72:	88 23       	and	r24, r24
     b74:	51 f0       	breq	.+20     	; 0xb8a <__stack+0x8b>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b76:	85 30       	cpi	r24, 0x05	; 5
     b78:	51 f0       	breq	.+20     	; 0xb8e <__stack+0x8f>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b7a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b7e:	82 ff       	sbrs	r24, 2
     b80:	f7 cf       	rjmp	.-18     	; 0xb70 <__stack+0x71>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     b8a:	82 e0       	ldi	r24, 0x02	; 2
     b8c:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     b8e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b90:	08 95       	ret

00000b92 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b92:	ef 92       	push	r14
     b94:	ff 92       	push	r15
     b96:	0f 93       	push	r16
     b98:	1f 93       	push	r17
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	ac 97       	sbiw	r28, 0x2c	; 44
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     bae:	e2 e9       	ldi	r30, 0x92	; 146
     bb0:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bb2:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     bb6:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bb8:	22 e0       	ldi	r18, 0x02	; 2
     bba:	ea 39       	cpi	r30, 0x9A	; 154
     bbc:	f2 07       	cpc	r31, r18
     bbe:	c9 f7       	brne	.-14     	; 0xbb2 <USB_Device_ProcessControlRequest+0x20>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bc0:	3c db       	rcall	.-2440   	; 0x23a <EVENT_USB_Device_ControlRequest>
     bc2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc6:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
     bc8:	2f c1       	rjmp	.+606    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     bca:	80 91 92 02 	lds	r24, 0x0292
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bce:	90 91 93 02 	lds	r25, 0x0293

		switch (USB_ControlRequest.bRequest)
     bd2:	95 30       	cpi	r25, 0x05	; 5
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <USB_Device_ProcessControlRequest+0x46>
     bd6:	87 c0       	rjmp	.+270    	; 0xce6 <USB_Device_ProcessControlRequest+0x154>
     bd8:	38 f4       	brcc	.+14     	; 0xbe8 <USB_Device_ProcessControlRequest+0x56>
     bda:	91 30       	cpi	r25, 0x01	; 1
     bdc:	b1 f1       	breq	.+108    	; 0xc4a <USB_Device_ProcessControlRequest+0xb8>
     bde:	70 f0       	brcs	.+28     	; 0xbfc <USB_Device_ProcessControlRequest+0x6a>
     be0:	93 30       	cpi	r25, 0x03	; 3
     be2:	09 f0       	breq	.+2      	; 0xbe6 <USB_Device_ProcessControlRequest+0x54>
     be4:	21 c1       	rjmp	.+578    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     be6:	31 c0       	rjmp	.+98     	; 0xc4a <USB_Device_ProcessControlRequest+0xb8>
     be8:	98 30       	cpi	r25, 0x08	; 8
     bea:	09 f4       	brne	.+2      	; 0xbee <USB_Device_ProcessControlRequest+0x5c>
     bec:	f3 c0       	rjmp	.+486    	; 0xdd4 <USB_Device_ProcessControlRequest+0x242>
     bee:	99 30       	cpi	r25, 0x09	; 9
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <USB_Device_ProcessControlRequest+0x62>
     bf2:	ff c0       	rjmp	.+510    	; 0xdf2 <USB_Device_ProcessControlRequest+0x260>
     bf4:	96 30       	cpi	r25, 0x06	; 6
     bf6:	09 f0       	breq	.+2      	; 0xbfa <USB_Device_ProcessControlRequest+0x68>
     bf8:	17 c1       	rjmp	.+558    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     bfa:	9b c0       	rjmp	.+310    	; 0xd32 <USB_Device_ProcessControlRequest+0x1a0>
     bfc:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     bfe:	21 f0       	breq	.+8      	; 0xc08 <USB_Device_ProcessControlRequest+0x76>
     c00:	82 38       	cpi	r24, 0x82	; 130
     c02:	09 f0       	breq	.+2      	; 0xc06 <USB_Device_ProcessControlRequest+0x74>
     c04:	11 c1       	rjmp	.+546    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     c06:	08 c0       	rjmp	.+16     	; 0xc18 <USB_Device_ProcessControlRequest+0x86>
     c08:	80 91 8f 02 	lds	r24, 0x028F
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     c0c:	90 91 90 02 	lds	r25, 0x0290
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c10:	99 23       	and	r25, r25
     c12:	89 f0       	breq	.+34     	; 0xc36 <USB_Device_ProcessControlRequest+0xa4>
     c14:	82 60       	ori	r24, 0x02	; 2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c16:	0f c0       	rjmp	.+30     	; 0xc36 <USB_Device_ProcessControlRequest+0xa4>
     c18:	80 91 96 02 	lds	r24, 0x0296
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c1c:	90 91 97 02 	lds	r25, 0x0297
     c20:	8f 70       	andi	r24, 0x0F	; 15
     c22:	99 27       	eor	r25, r25
     c24:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c28:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c2c:	85 fb       	bst	r24, 5
     c2e:	88 27       	eor	r24, r24
     c30:	80 f9       	bld	r24, 0
     c32:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c36:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c3a:	97 7f       	andi	r25, 0xF7	; 247
     c3c:	90 93 e8 00 	sts	0x00E8, r25
     c40:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c44:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
     c48:	d0 c0       	rjmp	.+416    	; 0xdea <USB_Device_ProcessControlRequest+0x258>
     c4a:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c4c:	19 f0       	breq	.+6      	; 0xc54 <USB_Device_ProcessControlRequest+0xc2>
     c4e:	82 30       	cpi	r24, 0x02	; 2
     c50:	09 f0       	breq	.+2      	; 0xc54 <USB_Device_ProcessControlRequest+0xc2>
     c52:	ea c0       	rjmp	.+468    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     c54:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c56:	21 f0       	breq	.+8      	; 0xc60 <USB_Device_ProcessControlRequest+0xce>
     c58:	82 30       	cpi	r24, 0x02	; 2
     c5a:	09 f0       	breq	.+2      	; 0xc5e <USB_Device_ProcessControlRequest+0xcc>
     c5c:	e5 c0       	rjmp	.+458    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     c5e:	0b c0       	rjmp	.+22     	; 0xc76 <USB_Device_ProcessControlRequest+0xe4>
     c60:	80 91 94 02 	lds	r24, 0x0294
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	09 f0       	breq	.+2      	; 0xc6a <USB_Device_ProcessControlRequest+0xd8>
     c68:	df c0       	rjmp	.+446    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     c6a:	93 30       	cpi	r25, 0x03	; 3
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c6c:	09 f0       	breq	.+2      	; 0xc70 <USB_Device_ProcessControlRequest+0xde>
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	80 93 90 02 	sts	0x0290, r24
     c74:	2f c0       	rjmp	.+94     	; 0xcd4 <USB_Device_ProcessControlRequest+0x142>
     c76:	80 91 94 02 	lds	r24, 0x0294

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c7a:	81 11       	cpse	r24, r1
     c7c:	2b c0       	rjmp	.+86     	; 0xcd4 <USB_Device_ProcessControlRequest+0x142>
     c7e:	80 91 96 02 	lds	r24, 0x0296
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c82:	90 91 97 02 	lds	r25, 0x0297
     c86:	8f 70       	andi	r24, 0x0F	; 15
     c88:	99 27       	eor	r25, r25
     c8a:	00 97       	sbiw	r24, 0x00	; 0

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c8c:	09 f4       	brne	.+2      	; 0xc90 <USB_Device_ProcessControlRequest+0xfe>
     c8e:	cc c0       	rjmp	.+408    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     c90:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c94:	20 91 eb 00 	lds	r18, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     c98:	20 ff       	sbrs	r18, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     c9a:	1c c0       	rjmp	.+56     	; 0xcd4 <USB_Device_ProcessControlRequest+0x142>
     c9c:	20 91 93 02 	lds	r18, 0x0293
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ca0:	23 30       	cpi	r18, 0x03	; 3
     ca2:	21 f4       	brne	.+8      	; 0xcac <USB_Device_ProcessControlRequest+0x11a>
     ca4:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ca8:	80 62       	ori	r24, 0x20	; 32
     caa:	12 c0       	rjmp	.+36     	; 0xcd0 <USB_Device_ProcessControlRequest+0x13e>
     cac:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     cb0:	90 61       	ori	r25, 0x10	; 16
     cb2:	90 93 eb 00 	sts	0x00EB, r25
     cb6:	21 e0       	ldi	r18, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <USB_Device_ProcessControlRequest+0x12c>
     cbc:	22 0f       	add	r18, r18
     cbe:	8a 95       	dec	r24
     cc0:	ea f7       	brpl	.-6      	; 0xcbc <USB_Device_ProcessControlRequest+0x12a>
     cc2:	20 93 ea 00 	sts	0x00EA, r18
     cc6:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
     cca:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cce:	88 60       	ori	r24, 0x08	; 8
     cd0:	80 93 eb 00 	sts	0x00EB, r24
     cd4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cd8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	80 93 e8 00 	sts	0x00E8, r24
     ce2:	f1 dc       	rcall	.-1566   	; 0x6c6 <Endpoint_ClearStatusStage>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ce4:	a1 c0       	rjmp	.+322    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     ce6:	81 11       	cpse	r24, r1
     ce8:	9f c0       	rjmp	.+318    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cea:	00 91 94 02 	lds	r16, 0x0294
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     cee:	10 91 95 02 	lds	r17, 0x0295
     cf2:	0f 77       	andi	r16, 0x7F	; 127
     cf4:	11 27       	eor	r17, r17
     cf6:	e0 2e       	mov	r14, r16
     cf8:	ff b6       	in	r15, 0x3f	; 63
     cfa:	f8 94       	cli
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cfc:	80 91 e8 00 	lds	r24, 0x00E8
     d00:	87 7f       	andi	r24, 0xF7	; 247
     d02:	80 93 e8 00 	sts	0x00E8, r24
     d06:	df dc       	rcall	.-1602   	; 0x6c6 <Endpoint_ClearStatusStage>
     d08:	80 91 e8 00 	lds	r24, 0x00E8
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d0c:	80 ff       	sbrs	r24, 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d0e:	fc cf       	rjmp	.-8      	; 0xd08 <USB_Device_ProcessControlRequest+0x176>
     d10:	80 91 e3 00 	lds	r24, 0x00E3

	while (!(Endpoint_IsINReady()));
     d14:	80 78       	andi	r24, 0x80	; 128
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     d16:	80 2b       	or	r24, r16
     d18:	80 93 e3 00 	sts	0x00E3, r24
     d1c:	80 68       	ori	r24, 0x80	; 128

				UDADDR = Temp;
     d1e:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     d22:	ee 20       	and	r14, r14
     d24:	11 f0       	breq	.+4      	; 0xd2a <USB_Device_ProcessControlRequest+0x198>
     d26:	83 e0       	ldi	r24, 0x03	; 3

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d28:	01 c0       	rjmp	.+2      	; 0xd2c <USB_Device_ProcessControlRequest+0x19a>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	8e bb       	out	0x1e, r24	; 30
     d2e:	ff be       	out	0x3f, r15	; 63
     d30:	7b c0       	rjmp	.+246    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     d32:	80 58       	subi	r24, 0x80	; 128
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d34:	82 30       	cpi	r24, 0x02	; 2
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     d36:	08 f0       	brcs	.+2      	; 0xd3a <USB_Device_ProcessControlRequest+0x1a8>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d38:	77 c0       	rjmp	.+238    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     d3a:	80 91 94 02 	lds	r24, 0x0294
     d3e:	90 91 95 02 	lds	r25, 0x0295
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d42:	8c 3d       	cpi	r24, 0xDC	; 220
     d44:	23 e0       	ldi	r18, 0x03	; 3
     d46:	92 07       	cpc	r25, r18
     d48:	71 f5       	brne	.+92     	; 0xda6 <USB_Device_ProcessControlRequest+0x214>
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8a 83       	std	Y+2, r24	; 0x02
     d4e:	8a e2       	ldi	r24, 0x2A	; 42
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d50:	89 83       	std	Y+1, r24	; 0x01
     d52:	4f b7       	in	r20, 0x3f	; 63
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d54:	f8 94       	cli
     d56:	de 01       	movw	r26, r28
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d58:	13 96       	adiw	r26, 0x03	; 3
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d5a:	20 e0       	ldi	r18, 0x00	; 0

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);
     d5c:	3e e0       	ldi	r19, 0x0E	; 14
     d5e:	51 e2       	ldi	r21, 0x21	; 33
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d60:	e3 2f       	mov	r30, r19
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     d62:	f0 e0       	ldi	r31, 0x00	; 0

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d64:	50 93 57 00 	sts	0x0057, r21
     d68:	e4 91       	lpm	r30, Z
     d6a:	20 ff       	sbrs	r18, 0
     d6c:	03 c0       	rjmp	.+6      	; 0xd74 <USB_Device_ProcessControlRequest+0x1e2>
     d6e:	e2 95       	swap	r30

					if (SerialCharNum & 0x01)
     d70:	ef 70       	andi	r30, 0x0F	; 15
     d72:	3f 5f       	subi	r19, 0xFF	; 255
					{
						SerialByte >>= 4;
     d74:	ef 70       	andi	r30, 0x0F	; 15
     d76:	8e 2f       	mov	r24, r30
						SigReadAddress++;
     d78:	90 e0       	ldi	r25, 0x00	; 0
					}

					SerialByte &= 0x0F;
     d7a:	ea 30       	cpi	r30, 0x0A	; 10
     d7c:	10 f0       	brcs	.+4      	; 0xd82 <USB_Device_ProcessControlRequest+0x1f0>
     d7e:	c7 96       	adiw	r24, 0x37	; 55

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <USB_Device_ProcessControlRequest+0x1f2>
     d82:	c0 96       	adiw	r24, 0x30	; 48
     d84:	8d 93       	st	X+, r24
     d86:	9d 93       	st	X+, r25
     d88:	2f 5f       	subi	r18, 0xFF	; 255
     d8a:	24 31       	cpi	r18, 0x14	; 20
     d8c:	49 f7       	brne	.-46     	; 0xd60 <USB_Device_ProcessControlRequest+0x1ce>
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d8e:	4f bf       	out	0x3f, r20	; 63
     d90:	80 91 e8 00 	lds	r24, 0x00E8
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d94:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d96:	80 93 e8 00 	sts	0x00E8, r24
     d9a:	6a e2       	ldi	r22, 0x2A	; 42
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	ce 01       	movw	r24, r28

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     da0:	01 96       	adiw	r24, 0x01	; 1
     da2:	3c de       	rcall	.-904    	; 0xa1c <Endpoint_Write_Control_Stream_LE>
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <USB_Device_ProcessControlRequest+0x236>
     da6:	ae 01       	movw	r20, r28
     da8:	45 5d       	subi	r20, 0xD5	; 213
     daa:	5f 4f       	sbci	r21, 0xFF	; 255
     dac:	60 91 96 02 	lds	r22, 0x0296
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     db0:	d7 db       	rcall	.-2130   	; 0x560 <CALLBACK_USB_GetDescriptor>
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	c9 f1       	breq	.+114    	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     db6:	20 91 e8 00 	lds	r18, 0x00E8
     dba:	27 7f       	andi	r18, 0xF7	; 247
     dbc:	20 93 e8 00 	sts	0x00E8, r18
     dc0:	bc 01       	movw	r22, r24
     dc2:	8b a5       	ldd	r24, Y+43	; 0x2b
     dc4:	9c a5       	ldd	r25, Y+44	; 0x2c
     dc6:	87 de       	rcall	.-754    	; 0xad6 <Endpoint_Write_Control_PStream_LE>
     dc8:	80 91 e8 00 	lds	r24, 0x00E8
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     dcc:	8b 77       	andi	r24, 0x7B	; 123
     dce:	80 93 e8 00 	sts	0x00E8, r24
     dd2:	2a c0       	rjmp	.+84     	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dd4:	80 38       	cpi	r24, 0x80	; 128
     dd6:	41 f5       	brne	.+80     	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
     dd8:	80 91 e8 00 	lds	r24, 0x00E8
     ddc:	87 7f       	andi	r24, 0xF7	; 247
     dde:	80 93 e8 00 	sts	0x00E8, r24
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     de2:	80 91 8e 02 	lds	r24, 0x028E
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     de6:	80 93 f1 00 	sts	0x00F1, r24
     dea:	80 91 e8 00 	lds	r24, 0x00E8

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     dee:	8e 77       	andi	r24, 0x7E	; 126
     df0:	76 cf       	rjmp	.-276    	; 0xcde <USB_Device_ProcessControlRequest+0x14c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     df2:	81 11       	cpse	r24, r1
     df4:	19 c0       	rjmp	.+50     	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     df6:	90 91 94 02 	lds	r25, 0x0294
     dfa:	92 30       	cpi	r25, 0x02	; 2
     dfc:	a8 f4       	brcc	.+42     	; 0xe28 <USB_Device_ProcessControlRequest+0x296>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     dfe:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     e02:	87 7f       	andi	r24, 0xF7	; 247
     e04:	80 93 e8 00 	sts	0x00E8, r24
     e08:	90 93 8e 02 	sts	0x028E, r25
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e0c:	5c dc       	rcall	.-1864   	; 0x6c6 <Endpoint_ClearStatusStage>
     e0e:	80 91 8e 02 	lds	r24, 0x028E
     e12:	81 11       	cpse	r24, r1
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <USB_Device_ProcessControlRequest+0x28c>
     e16:	80 91 e3 00 	lds	r24, 0x00E3

	Endpoint_ClearStatusStage();
     e1a:	87 ff       	sbrs	r24, 7

	if (USB_Device_ConfigurationNumber)
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <USB_Device_ProcessControlRequest+0x290>
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <USB_Device_ProcessControlRequest+0x292>
     e22:	81 e0       	ldi	r24, 0x01	; 1
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e24:	8e bb       	out	0x1e, r24	; 30
     e26:	06 da       	rcall	.-3060   	; 0x234 <EVENT_USB_Device_ConfigurationChanged>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e28:	80 91 e8 00 	lds	r24, 0x00E8
     e2c:	83 ff       	sbrs	r24, 3
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <USB_Device_ProcessControlRequest+0x2b2>
     e30:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
     e34:	80 62       	ori	r24, 0x20	; 32
     e36:	80 93 eb 00 	sts	0x00EB, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e3a:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e3e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e40:	80 93 e8 00 	sts	0x00E8, r24
     e44:	ac 96       	adiw	r28, 0x2c	; 44
     e46:	0f b6       	in	r0, 0x3f	; 63
     e48:	f8 94       	cli
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	cd bf       	out	0x3d, r28	; 61
     e50:	df 91       	pop	r29
     e52:	cf 91       	pop	r28
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     e54:	1f 91       	pop	r17
     e56:	0f 91       	pop	r16
     e58:	ff 90       	pop	r15
     e5a:	ef 90       	pop	r14
     e5c:	08 95       	ret

00000e5e <USB_Event_Stub>:
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{
     e5e:	08 95       	ret

00000e60 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e60:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     e62:	8e b3       	in	r24, 0x1e	; 30
     e64:	88 23       	and	r24, r24
     e66:	a9 f0       	breq	.+42     	; 0xe92 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e68:	80 91 e9 00 	lds	r24, 0x00E9
     e6c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e6e:	90 91 ec 00 	lds	r25, 0x00EC
     e72:	90 ff       	sbrs	r25, 0
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <USB_USBTask+0x1a>
     e76:	90 e8       	ldi	r25, 0x80	; 128
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <USB_USBTask+0x1c>
     e7a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e7c:	c9 2f       	mov	r28, r25
     e7e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e80:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e84:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     e88:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
     e8a:	83 de       	rcall	.-762    	; 0xb92 <USB_Device_ProcessControlRequest>
     e8c:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e8e:	c0 93 e9 00 	sts	0x00E9, r28
     e92:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     e94:	08 95       	ret

00000e96 <CDC_Device_ConfigureEndpoints>:
     e96:	cf 93       	push	r28
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e98:	df 93       	push	r29
     e9a:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     e9c:	40 96       	adiw	r24, 0x10	; 16
     e9e:	fc 01       	movw	r30, r24
     ea0:	8b e0       	ldi	r24, 0x0B	; 11
     ea2:	df 01       	movw	r26, r30
     ea4:	1d 92       	st	X+, r1
     ea6:	8a 95       	dec	r24
     ea8:	e9 f7       	brne	.-6      	; 0xea4 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     eaa:	82 e0       	ldi	r24, 0x02	; 2
     eac:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     eae:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	ce 01       	movw	r24, r28
     eb8:	01 96       	adiw	r24, 0x01	; 1
     eba:	c6 db       	rcall	.-2164   	; 0x648 <Endpoint_ConfigureEndpointTable>
     ebc:	88 23       	and	r24, r24
     ebe:	61 f0       	breq	.+24     	; 0xed8 <CDC_Device_ConfigureEndpoints+0x42>
     ec0:	61 e0       	ldi	r22, 0x01	; 1
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
     ec2:	ce 01       	movw	r24, r28
     ec4:	06 96       	adiw	r24, 0x06	; 6
     ec6:	c0 db       	rcall	.-2176   	; 0x648 <Endpoint_ConfigureEndpointTable>
     ec8:	88 23       	and	r24, r24
     eca:	31 f0       	breq	.+12     	; 0xed8 <CDC_Device_ConfigureEndpoints+0x42>
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	ce 01       	movw	r24, r28
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     ed0:	0b 96       	adiw	r24, 0x0b	; 11
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
	  return false;

	return true;
}
     ed6:	b8 cb       	rjmp	.-2192   	; 0x648 <Endpoint_ConfigureEndpointTable>
     ed8:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
	  return false;

	return true;
}
     ede:	08 95       	ret

00000ee0 <CDC_Device_SendByte>:
     ee0:	cf 93       	push	r28
     ee2:	c6 2f       	mov	r28, r22
     ee4:	2e b3       	in	r18, 0x1e	; 30
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     ee6:	24 30       	cpi	r18, 0x04	; 4
     ee8:	f1 f4       	brne	.+60     	; 0xf26 <CDC_Device_SendByte+0x46>
     eea:	fc 01       	movw	r30, r24
     eec:	44 89       	ldd	r20, Z+20	; 0x14
     eee:	55 89       	ldd	r21, Z+21	; 0x15
     ef0:	66 89       	ldd	r22, Z+22	; 0x16
     ef2:	77 89       	ldd	r23, Z+23	; 0x17
     ef4:	45 2b       	or	r20, r21
     ef6:	46 2b       	or	r20, r22
     ef8:	47 2b       	or	r20, r23
     efa:	a9 f0       	breq	.+42     	; 0xf26 <CDC_Device_SendByte+0x46>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     efc:	81 81       	ldd	r24, Z+1	; 0x01
     efe:	8f 70       	andi	r24, 0x0F	; 15
     f00:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f04:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     f08:	85 ff       	sbrs	r24, 5
     f0a:	04 c0       	rjmp	.+8      	; 0xf14 <CDC_Device_SendByte+0x34>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     f0c:	c0 93 f1 00 	sts	0x00F1, r28
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	0a c0       	rjmp	.+20     	; 0xf28 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f14:	80 91 e8 00 	lds	r24, 0x00E8
     f18:	8e 77       	andi	r24, 0x7E	; 126
     f1a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f1e:	f2 db       	rcall	.-2076   	; 0x704 <Endpoint_WaitUntilReady>
     f20:	88 23       	and	r24, r24
     f22:	a1 f3       	breq	.-24     	; 0xf0c <CDC_Device_SendByte+0x2c>
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <CDC_Device_SendByte+0x48>
     f26:	82 e0       	ldi	r24, 0x02	; 2

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f28:	cf 91       	pop	r28
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
     f2a:	08 95       	ret

00000f2c <CDC_Device_Flush>:
     f2c:	2e b3       	in	r18, 0x1e	; 30

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f2e:	24 30       	cpi	r18, 0x04	; 4
     f30:	51 f5       	brne	.+84     	; 0xf86 <CDC_Device_Flush+0x5a>
     f32:	fc 01       	movw	r30, r24
     f34:	44 89       	ldd	r20, Z+20	; 0x14
     f36:	55 89       	ldd	r21, Z+21	; 0x15
     f38:	66 89       	ldd	r22, Z+22	; 0x16
     f3a:	77 89       	ldd	r23, Z+23	; 0x17
     f3c:	45 2b       	or	r20, r21
     f3e:	46 2b       	or	r20, r22
     f40:	47 2b       	or	r20, r23
     f42:	09 f1       	breq	.+66     	; 0xf86 <CDC_Device_Flush+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f44:	81 81       	ldd	r24, Z+1	; 0x01
     f46:	8f 70       	andi	r24, 0x0F	; 15
     f48:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     f4c:	30 91 f3 00 	lds	r19, 0x00F3
     f50:	20 91 f2 00 	lds	r18, 0x00F2
     f54:	93 2f       	mov	r25, r19
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	82 2b       	or	r24, r18

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     f5a:	89 2b       	or	r24, r25
     f5c:	11 f4       	brne	.+4      	; 0xf62 <CDC_Device_Flush+0x36>
	  return ENDPOINT_READYWAIT_NoError;
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	08 95       	ret
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f62:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f66:	80 91 e8 00 	lds	r24, 0x00E8
     f6a:	8e 77       	andi	r24, 0x7E	; 126
     f6c:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f70:	95 fd       	sbrc	r25, 5
     f72:	f5 cf       	rjmp	.-22     	; 0xf5e <CDC_Device_Flush+0x32>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f74:	c7 db       	rcall	.-2162   	; 0x704 <Endpoint_WaitUntilReady>
     f76:	81 11       	cpse	r24, r1
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <CDC_Device_Flush+0x5c>
     f7a:	90 91 e8 00 	lds	r25, 0x00E8
     f7e:	9e 77       	andi	r25, 0x7E	; 126
     f80:	90 93 e8 00 	sts	0x00E8, r25
     f84:	08 95       	ret
     f86:	82 e0       	ldi	r24, 0x02	; 2
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
     f88:	08 95       	ret

00000f8a <CDC_Device_USBTask>:

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     f8a:	2e b3       	in	r18, 0x1e	; 30
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f8c:	24 30       	cpi	r18, 0x04	; 4
     f8e:	51 f4       	brne	.+20     	; 0xfa4 <CDC_Device_USBTask+0x1a>
     f90:	fc 01       	movw	r30, r24
     f92:	44 89       	ldd	r20, Z+20	; 0x14
     f94:	55 89       	ldd	r21, Z+21	; 0x15
     f96:	66 89       	ldd	r22, Z+22	; 0x16
     f98:	77 89       	ldd	r23, Z+23	; 0x17
     f9a:	45 2b       	or	r20, r21
     f9c:	46 2b       	or	r20, r22
     f9e:	47 2b       	or	r20, r23
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <CDC_Device_USBTask+0x1a>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     fa2:	c4 cf       	rjmp	.-120    	; 0xf2c <CDC_Device_Flush>
     fa4:	08 95       	ret

00000fa6 <CDC_Device_ReceiveByte>:
     fa6:	2e b3       	in	r18, 0x1e	; 30
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fa8:	24 30       	cpi	r18, 0x04	; 4
     faa:	19 f0       	breq	.+6      	; 0xfb2 <CDC_Device_ReceiveByte+0xc>
	  return -1;
     fac:	2f ef       	ldi	r18, 0xFF	; 255
     fae:	3f ef       	ldi	r19, 0xFF	; 255
     fb0:	2e c0       	rjmp	.+92     	; 0x100e <CDC_Device_ReceiveByte+0x68>
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     fb2:	fc 01       	movw	r30, r24
     fb4:	44 89       	ldd	r20, Z+20	; 0x14
     fb6:	55 89       	ldd	r21, Z+21	; 0x15
     fb8:	66 89       	ldd	r22, Z+22	; 0x16
     fba:	77 89       	ldd	r23, Z+23	; 0x17
     fbc:	45 2b       	or	r20, r21
     fbe:	46 2b       	or	r20, r22
     fc0:	47 2b       	or	r20, r23
     fc2:	a1 f3       	breq	.-24     	; 0xfac <CDC_Device_ReceiveByte+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc4:	86 81       	ldd	r24, Z+6	; 0x06
     fc6:	8f 70       	andi	r24, 0x0F	; 15
     fc8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     fcc:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     fd0:	82 ff       	sbrs	r24, 2
     fd2:	ec cf       	rjmp	.-40     	; 0xfac <CDC_Device_ReceiveByte+0x6>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     fd4:	30 91 f3 00 	lds	r19, 0x00F3
     fd8:	20 91 f2 00 	lds	r18, 0x00F2
     fdc:	93 2f       	mov	r25, r19
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	82 2b       	or	r24, r18
	{
		if (Endpoint_BytesInEndpoint())
     fe2:	89 2b       	or	r24, r25
     fe4:	21 f0       	breq	.+8      	; 0xfee <CDC_Device_ReceiveByte+0x48>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     fe6:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <CDC_Device_ReceiveByte+0x4c>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
     fee:	2f ef       	ldi	r18, 0xFF	; 255
     ff0:	3f ef       	ldi	r19, 0xFF	; 255
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     ff2:	50 91 f3 00 	lds	r21, 0x00F3
     ff6:	40 91 f2 00 	lds	r20, 0x00F2
     ffa:	95 2f       	mov	r25, r21
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	84 2b       	or	r24, r20
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1000:	89 2b       	or	r24, r25
    1002:	29 f4       	brne	.+10     	; 0x100e <CDC_Device_ReceiveByte+0x68>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1004:	80 91 e8 00 	lds	r24, 0x00E8
    1008:	8b 77       	andi	r24, 0x7B	; 123
    100a:	80 93 e8 00 	sts	0x00E8, r24
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    100e:	c9 01       	movw	r24, r18
    1010:	08 95       	ret

00001012 <CDC_Device_Event_Stub>:
}
#endif

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{
    1012:	08 95       	ret

00001014 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    101e:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1022:	83 ff       	sbrs	r24, 3
    1024:	ae c0       	rjmp	.+348    	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1026:	88 81       	ld	r24, Y
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	20 91 96 02 	lds	r18, 0x0296
    102e:	30 91 97 02 	lds	r19, 0x0297
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	09 f0       	breq	.+2      	; 0x103a <CDC_Device_ProcessControlRequest+0x26>
    1038:	a4 c0       	rjmp	.+328    	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
	  return;

	switch (USB_ControlRequest.bRequest)
    103a:	80 91 93 02 	lds	r24, 0x0293
    103e:	81 32       	cpi	r24, 0x21	; 33
    1040:	61 f0       	breq	.+24     	; 0x105a <CDC_Device_ProcessControlRequest+0x46>
    1042:	20 f4       	brcc	.+8      	; 0x104c <CDC_Device_ProcessControlRequest+0x38>
    1044:	80 32       	cpi	r24, 0x20	; 32
    1046:	09 f0       	breq	.+2      	; 0x104a <CDC_Device_ProcessControlRequest+0x36>
    1048:	9c c0       	rjmp	.+312    	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <CDC_Device_ProcessControlRequest+0xb6>
    104c:	82 32       	cpi	r24, 0x22	; 34
    104e:	09 f4       	brne	.+2      	; 0x1052 <CDC_Device_ProcessControlRequest+0x3e>
    1050:	70 c0       	rjmp	.+224    	; 0x1132 <CDC_Device_ProcessControlRequest+0x11e>
    1052:	83 32       	cpi	r24, 0x23	; 35
    1054:	09 f0       	breq	.+2      	; 0x1058 <CDC_Device_ProcessControlRequest+0x44>
    1056:	95 c0       	rjmp	.+298    	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
    1058:	82 c0       	rjmp	.+260    	; 0x115e <CDC_Device_ProcessControlRequest+0x14a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    105a:	80 91 92 02 	lds	r24, 0x0292
    105e:	81 3a       	cpi	r24, 0xA1	; 161
    1060:	09 f0       	breq	.+2      	; 0x1064 <CDC_Device_ProcessControlRequest+0x50>
    1062:	8f c0       	rjmp	.+286    	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1064:	80 91 e8 00 	lds	r24, 0x00E8
    1068:	87 7f       	andi	r24, 0xF7	; 247
    106a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    106e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1072:	80 ff       	sbrs	r24, 0
    1074:	fc cf       	rjmp	.-8      	; 0x106e <CDC_Device_ProcessControlRequest+0x5a>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    1076:	4c 89       	ldd	r20, Y+20	; 0x14
    1078:	5d 89       	ldd	r21, Y+21	; 0x15
    107a:	6e 89       	ldd	r22, Y+22	; 0x16
    107c:	7f 89       	ldd	r23, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    107e:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 8);
    1082:	05 2f       	mov	r16, r21
    1084:	16 2f       	mov	r17, r22
    1086:	27 2f       	mov	r18, r23
    1088:	33 27       	eor	r19, r19
    108a:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 16);
    108e:	8b 01       	movw	r16, r22
    1090:	22 27       	eor	r18, r18
    1092:	33 27       	eor	r19, r19
    1094:	00 93 f1 00 	sts	0x00F1, r16
				UEDATX = (Data >> 24);
    1098:	47 2f       	mov	r20, r23
    109a:	55 27       	eor	r21, r21
    109c:	66 27       	eor	r22, r22
    109e:	77 27       	eor	r23, r23
    10a0:	40 93 f1 00 	sts	0x00F1, r20
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    10a4:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10a6:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    10aa:	89 8d       	ldd	r24, Y+25	; 0x19
    10ac:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    10b0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10b2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10b6:	80 91 e8 00 	lds	r24, 0x00E8
    10ba:	8e 77       	andi	r24, 0x7E	; 126
    10bc:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10c8:	fe ca       	rjmp	.-2564   	; 0x6c6 <Endpoint_ClearStatusStage>
    10ca:	80 91 92 02 	lds	r24, 0x0292
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10ce:	81 32       	cpi	r24, 0x21	; 33
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <CDC_Device_ProcessControlRequest+0xc0>
    10d2:	57 c0       	rjmp	.+174    	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
    10d4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10d8:	87 7f       	andi	r24, 0xF7	; 247
    10da:	80 93 e8 00 	sts	0x00E8, r24
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <CDC_Device_ProcessControlRequest+0xd4>
    10e0:	8e b3       	in	r24, 0x1e	; 30
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    10e2:	88 23       	and	r24, r24
    10e4:	09 f4       	brne	.+2      	; 0x10e8 <CDC_Device_ProcessControlRequest+0xd4>
    10e6:	4d c0       	rjmp	.+154    	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
    10e8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10ec:	82 ff       	sbrs	r24, 2
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    10ee:	f8 cf       	rjmp	.-16     	; 0x10e0 <CDC_Device_ProcessControlRequest+0xcc>
    10f0:	30 91 f1 00 	lds	r19, 0x00F1
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    10f4:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[1] = UEDATX;
    10f8:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    10fc:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[3] = UEDATX;
    1100:	3c 8b       	std	Y+20, r19	; 0x14
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    1102:	2d 8b       	std	Y+21, r18	; 0x15
    1104:	9e 8b       	std	Y+22, r25	; 0x16
    1106:	8f 8b       	std	Y+23, r24	; 0x17
    1108:	80 91 f1 00 	lds	r24, 0x00F1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    110c:	88 8f       	std	Y+24, r24	; 0x18
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    110e:	80 91 f1 00 	lds	r24, 0x00F1
    1112:	89 8f       	std	Y+25, r24	; 0x19
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1114:	80 91 f1 00 	lds	r24, 0x00F1
    1118:	8a 8f       	std	Y+26, r24	; 0x1a
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    111a:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    111e:	8b 77       	andi	r24, 0x7B	; 123
    1120:	80 93 e8 00 	sts	0x00E8, r24
    1124:	d0 da       	rcall	.-2656   	; 0x6c6 <Endpoint_ClearStatusStage>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1126:	ce 01       	movw	r24, r28
    1128:	df 91       	pop	r29

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    112a:	cf 91       	pop	r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    112c:	1f 91       	pop	r17
    112e:	0f 91       	pop	r16
    1130:	b1 c8       	rjmp	.-3742   	; 0x294 <EVENT_CDC_Device_LineEncodingChanged>
    1132:	80 91 92 02 	lds	r24, 0x0292
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1136:	81 32       	cpi	r24, 0x21	; 33
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1138:	21 f5       	brne	.+72     	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
    113a:	80 91 e8 00 	lds	r24, 0x00E8
    113e:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1140:	80 93 e8 00 	sts	0x00E8, r24
    1144:	c0 da       	rcall	.-2688   	; 0x6c6 <Endpoint_ClearStatusStage>
    1146:	80 91 94 02 	lds	r24, 0x0294
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    114a:	90 91 95 02 	lds	r25, 0x0295

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    114e:	99 8b       	std	Y+17, r25	; 0x11
    1150:	88 8b       	std	Y+16, r24	; 0x10
    1152:	ce 01       	movw	r24, r28
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    115a:	0f 91       	pop	r16
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    115c:	5a cf       	rjmp	.-332    	; 0x1012 <CDC_Device_Event_Stub>
    115e:	80 91 92 02 	lds	r24, 0x0292
    1162:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    1164:	71 f4       	brne	.+28     	; 0x1182 <CDC_Device_ProcessControlRequest+0x16e>
    1166:	80 91 e8 00 	lds	r24, 0x00E8
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    116a:	87 7f       	andi	r24, 0xF7	; 247
    116c:	80 93 e8 00 	sts	0x00E8, r24
    1170:	aa da       	rcall	.-2732   	; 0x6c6 <Endpoint_ClearStatusStage>
    1172:	60 91 94 02 	lds	r22, 0x0294
    1176:	ce 01       	movw	r24, r28
    1178:	df 91       	pop	r29
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    117e:	0f 91       	pop	r16
    1180:	48 cf       	rjmp	.-368    	; 0x1012 <CDC_Device_Event_Stub>
    1182:	df 91       	pop	r29
			}

			break;
	}
}
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	08 95       	ret

0000118c <__udivmodsi4>:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    118c:	a1 e2       	ldi	r26, 0x21	; 33
    118e:	1a 2e       	mov	r1, r26
			}

			break;
	}
}
    1190:	aa 1b       	sub	r26, r26
    1192:	bb 1b       	sub	r27, r27
    1194:	ea 2f       	mov	r30, r26
    1196:	fb 2f       	mov	r31, r27
    1198:	0d c0       	rjmp	.+26     	; 0x11b4 <__udivmodsi4_ep>

0000119a <__udivmodsi4_loop>:
    119a:	aa 1f       	adc	r26, r26
    119c:	bb 1f       	adc	r27, r27
    119e:	ee 1f       	adc	r30, r30
    11a0:	ff 1f       	adc	r31, r31
    11a2:	a2 17       	cp	r26, r18
    11a4:	b3 07       	cpc	r27, r19
    11a6:	e4 07       	cpc	r30, r20
    11a8:	f5 07       	cpc	r31, r21
    11aa:	20 f0       	brcs	.+8      	; 0x11b4 <__udivmodsi4_ep>
    11ac:	a2 1b       	sub	r26, r18
    11ae:	b3 0b       	sbc	r27, r19
    11b0:	e4 0b       	sbc	r30, r20
    11b2:	f5 0b       	sbc	r31, r21

000011b4 <__udivmodsi4_ep>:
    11b4:	66 1f       	adc	r22, r22
    11b6:	77 1f       	adc	r23, r23
    11b8:	88 1f       	adc	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	1a 94       	dec	r1
    11be:	69 f7       	brne	.-38     	; 0x119a <__udivmodsi4_loop>
    11c0:	60 95       	com	r22
    11c2:	70 95       	com	r23
    11c4:	80 95       	com	r24
    11c6:	90 95       	com	r25
    11c8:	26 2f       	mov	r18, r22
    11ca:	37 2f       	mov	r19, r23
    11cc:	48 2f       	mov	r20, r24
    11ce:	59 2f       	mov	r21, r25
    11d0:	6a 2f       	mov	r22, r26
    11d2:	7b 2f       	mov	r23, r27
    11d4:	8e 2f       	mov	r24, r30
    11d6:	9f 2f       	mov	r25, r31
    11d8:	08 95       	ret

000011da <_exit>:
    11da:	f8 94       	cli

000011dc <__stop_program>:
    11dc:	ff cf       	rjmp	.-2      	; 0x11dc <__stop_program>
